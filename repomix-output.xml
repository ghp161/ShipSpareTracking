This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.devcontainer/devcontainer.json
.replit
.repomix/bundles.json
.streamlit/config.toml
app_settings.py
barcode_handler.py
data_manager.py
main.py
navbar.py
pages/admin.py
pages/analytics.py
pages/departments.py
pages/inventory.py
pages/operations.py
pages/reports.py
pyproject.toml
repl_nix_workspace.egg-info/dependency_links.txt
repl_nix_workspace.egg-info/PKG-INFO
repl_nix_workspace.egg-info/requires.txt
repl_nix_workspace.egg-info/SOURCES.txt
repl_nix_workspace.egg-info/top_level.txt
replit.nix
user_management.py
utils.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".devcontainer/devcontainer.json">
{
  "name": "Python 3",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "image": "mcr.microsoft.com/devcontainers/python:1-3.11-bullseye",
  "customizations": {
    "codespaces": {
      "openFiles": [
        "README.md",
        "main.py"
      ]
    },
    "vscode": {
      "settings": {},
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance"
      ]
    }
  },
  "updateContentCommand": "[ -f packages.txt ] && sudo apt update && sudo apt upgrade -y && sudo xargs apt install -y <packages.txt; [ -f requirements.txt ] && pip3 install --user -r requirements.txt; pip3 install --user streamlit; echo '✅ Packages installed and Requirements met'",
  "postAttachCommand": {
    "server": "streamlit run main.py --server.enableCORS false --server.enableXsrfProtection false"
  },
  "portsAttributes": {
    "8501": {
      "label": "Application",
      "onAutoForward": "openPreview"
    }
  },
  "forwardPorts": [
    8501
  ]
}
</file>

<file path=".repomix/bundles.json">
{
  "bundles": {}
}
</file>

<file path="repl_nix_workspace.egg-info/dependency_links.txt">

</file>

<file path="repl_nix_workspace.egg-info/PKG-INFO">
Metadata-Version: 2.4
Name: repl-nix-workspace
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.11
Requires-Dist: barcode>=1.0.4
Requires-Dist: numpy>=2.2.3
Requires-Dist: pandas>=2.2.3
Requires-Dist: pillow>=11.1.0
Requires-Dist: plotly>=6.0.0
Requires-Dist: python-barcode>=0.15.1
Requires-Dist: streamlit-option-menu>=0.4.0
Requires-Dist: streamlit>=1.43.1
Requires-Dist: trafilatura>=2.0.0
</file>

<file path="repl_nix_workspace.egg-info/requires.txt">
barcode>=1.0.4
numpy>=2.2.3
pandas>=2.2.3
pillow>=11.1.0
plotly>=6.0.0
python-barcode>=0.15.1
streamlit-option-menu>=0.4.0
streamlit>=1.43.1
trafilatura>=2.0.0
</file>

<file path="repl_nix_workspace.egg-info/SOURCES.txt">
pyproject.toml
pages/admin.py
pages/analytics.py
pages/inventory.py
pages/operations.py
pages/reports.py
repl_nix_workspace.egg-info/PKG-INFO
repl_nix_workspace.egg-info/SOURCES.txt
repl_nix_workspace.egg-info/dependency_links.txt
repl_nix_workspace.egg-info/requires.txt
repl_nix_workspace.egg-info/top_level.txt
</file>

<file path="repl_nix_workspace.egg-info/top_level.txt">
pages
</file>

<file path="replit.nix">
{pkgs}: {
  deps = [
    pkgs.glibcLocales
    pkgs.zlib
    pkgs.tk
    pkgs.tcl
    pkgs.openjpeg
    pkgs.libxcrypt
    pkgs.libwebp
    pkgs.libtiff
    pkgs.libjpeg
    pkgs.libimagequant
    pkgs.lcms2
    pkgs.freetype
  ];
}
</file>

<file path=".replit">
modules = ["python-3.11"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "autoscale"
run = ["sh", "-c", "streamlit run main.py"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Streamlit App"

[[workflows.workflow]]
name = "Streamlit App"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "streamlit run main.py"
waitForPort = 5000

[[ports]]
localPort = 5000
externalPort = 80

[[ports]]
localPort = 8501
externalPort = 3000
</file>

<file path="app_settings.py">
import streamlit as st
from PIL import Image
import base64
from io import BytesIO

def add_logo_background(logo_path="logo.png", opacity=0.4):
    """Add a visible but non-intrusive logo background"""
    try:
        # Open and prepare logo
        logo = Image.open(logo_path)
        
        # Convert to base64
        buffered = BytesIO()
        logo.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        
        # CSS with guaranteed visibility
        css = f"""
        <style>
        [data-testid="stAppViewContainer"] > .main {{
            background-image: url("data:image/png;base64,{img_str}");
            background-size: 40%;
            background-position: center;
            background-repeat: no-repeat;
            background-attachment: fixed;
            background-opacity: 0.4;
            position: relative;
        }}
        
        [data-testid="stAppViewContainer"] > .main::before {{
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.82);
            z-index: 0;
        }}
        
        [data-testid="stAppViewContainer"] > .main > div {{
            position: relative;
            z-index: 1;
        }}
        </style>
        """
        
        st.markdown(css, unsafe_allow_html=True)
        st.markdown('<div class="main">', unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"Couldn't load background image: {e}")

def set_page_configuration():
    # Set page configuration
    st.set_page_config(
        page_title="Ship Inventory Management System",
        page_icon="🚢",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # Reducing whitespace on the top of the page
    st.markdown("""
    <style>
    
            .stAppHeader {
                background-color: rgba(255, 255, 255, 0.0);  /* Transparent background */
                visibility: visible;  /* Ensure the header is visible */
            }

           /* Remove blank space at top and bottom */ 
           .block-container {
               padding-top: 0rem;
               padding-bottom: 0rem;
            }
           
           /* Remove blank space at the center canvas */ 
           .st-emotion-cache-z5fcl4 {
               position: relative;
               top: -62px;
               }
           
           /* Make the toolbar transparent and the content below it clickable */ 
           .st-emotion-cache-18ni7ap {
               pointer-events: none;
               background: rgb(255 255 255 / 0%)
               }
           .st-emotion-cache-zq5wmm {
               pointer-events: auto;
               background: rgb(255 255 255);
               border-radius: 5px;
               }
    </style>
    """, unsafe_allow_html=True)
</file>

<file path="pages/departments.py">
import streamlit as st
import pandas as pd
import sqlite3
from user_management import login_required
import navbar
from app_settings import set_page_configuration
from data_manager import DataManager

set_page_configuration()

current_page = "Departments"
st.header(current_page)

navbar.nav(current_page)
    

@login_required
def render_departments_page():

    tab1, tab2 = st.tabs(["Department Grid", "Add Department"])

    with tab1:
        #st.subheader("Department Data Grid")
        
        # Get data as DataFrame
        df = st.session_state.data_manager.get_all_departments_as_df()
        
        if not df.empty:
            # Display as interactive grid
            st.dataframe(
                df,
                column_config={
                    "id": "ID",
                    "code": "Code",
                    "name": "Department Name",
                    "parent_name": "Parent Department"
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Add edit/delete functionality
            st.subheader("Edit Department")
            dept_id = st.selectbox(
                "Select Department to Edit",
                df['id'],
                format_func=lambda x: f"{df[df['id']==x]['code'].iloc[0]} - {df[df['id']==x]['name'].iloc[0]}"
            )
            
            if dept_id:
                dept_data = df[df['id'] == dept_id].iloc[0]
                with st.form(f"edit_form_{dept_id}"):
                    new_code = st.text_input("Code", value=dept_data['code'])
                    new_name = st.text_input("Name", value=dept_data['name'])
                    
                    parent_options = st.session_state.data_manager.get_parent_options()
                    current_parent = None if dept_data['parent_name'] == 'Top Level' else \
                        next((p[0] for p in parent_options if p[1] == dept_data['parent_name']), None)
                    
                    parent_id = st.selectbox(
                        "Parent Department",
                        [None] + [p[0] for p in parent_options],
                        format_func=lambda x: "Top Level" if x is None else \
                            next((p[1] for p in parent_options if p[0] == x), "None"),
                        index=0 if current_parent is None else \
                            [p[0] for p in parent_options].index(current_parent) + 1
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.form_submit_button("Update"):
                            # Implement update logic
                            if st.session_state.data_manager.update_department(dept_id, new_code, new_name, parent_id):
                                st.rerun()
                                st.success("Department Updated successfully")                                
                            else:
                                st.error("Department code already exists")
                    with col2:
                        if st.form_submit_button("Delete"):
                            # Implement delete logic
                            success, message = st.session_state.data_manager.delete_department(dept_id)
                            if success:
                                st.rerun()
                                st.success("Department deleted successfully!")                                
                            else:
                                st.error(f"Deletion failed: {message}")
        else:
            st.info("No departments found")

    with tab2:
        #st.subheader("Add New Department")
        with st.form("add_department_form"):
            code = st.text_input("Department Code", max_chars=10)
            name = st.text_input("Department Name")
            
            parent_options = st.session_state.data_manager.get_parent_options()
            is_parent = st.checkbox("This is a top-level department", value=True)
            
            parent_id = None
            if not is_parent and parent_options:
                parent_id = st.selectbox(
                    "Parent Department",
                    [p[0] for p in parent_options],
                    format_func=lambda x: next((p[1] for p in parent_options if p[0] == x), None),
                    index=0
                )
            
            if st.form_submit_button("Add Department"):
                if code and name:
                    if st.session_state.data_manager.add_department(code, name, parent_id):
                        st.success("Department added successfully")
                        st.rerun()
                    else:
                        st.error("Department code already exists")
                else:
                    st.error("Please fill in all required fields")

if __name__ == "__main__":
    render_departments_page()
</file>

<file path="utils.py">
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime, timedelta

def create_stock_level_chart(df):
    fig = px.bar(
        df,
        x='name',
        y=['quantity', 'min_order_level'],
        title='Stock Levels vs Minimum Order Levels',
        barmode='group'
    )
    return fig

def create_transaction_trend(df):
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    daily_transactions = df.groupby(['timestamp', 'transaction_type']).size().reset_index(name='count')

    fig = px.line(
        daily_transactions,
        x='timestamp',
        y='count',
        color='transaction_type',
        title='Transaction Trends'
    )
    return fig

def format_transaction_table(df):
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.sort_values('timestamp', ascending=False)
    return df[['timestamp', 'name', 'part_number', 'transaction_type', 'quantity']]

def calculate_moving_average(data, window=7):
    """Calculate moving average for demand forecasting"""
    return data.rolling(window=window).mean()

def calculate_exponential_smoothing(data, alpha=0.3):
    """Calculate exponential smoothing for trend analysis"""
    return data.ewm(alpha=alpha, adjust=False).mean()

def calculate_reorder_point(df, part_id, lead_time_days=7):
    """Calculate reorder point based on average daily demand and lead time"""
    part_transactions = df[df['part_id'] == part_id]
    if part_transactions.empty:
        return 0

    # Calculate daily demand
    daily_demand = part_transactions.groupby('timestamp')['quantity'].sum()
    avg_daily_demand = abs(daily_demand.mean())

    # Add safety stock (20% of lead time demand)
    safety_stock = avg_daily_demand * lead_time_days * 0.2
    reorder_point = (avg_daily_demand * lead_time_days) + safety_stock

    return round(reorder_point)

def calculate_stock_turnover(df, current_stock):
    """Calculate stock turnover rate"""
    if df.empty or current_stock == 0:
        return 0

    total_usage = abs(df[df['transaction_type'] == 'check_out']['quantity'].sum())
    avg_inventory = current_stock / 2  # Simple average inventory calculation

    if avg_inventory == 0:
        return 0

    turnover_rate = total_usage / avg_inventory
    return round(turnover_rate, 2)

def create_demand_forecast_chart(df, part_id, days_to_forecast=30):
    """Create demand forecast visualization"""
    part_transactions = df[df['part_id'] == part_id]
    if part_transactions.empty:
        return None

    # Prepare daily demand data
    daily_demand = part_transactions.groupby('timestamp')['quantity'].sum()

    # Calculate moving average and exponential smoothing
    ma = calculate_moving_average(daily_demand)
    ema = calculate_exponential_smoothing(daily_demand)

    # Create forecast dates
    last_date = daily_demand.index.max()
    forecast_dates = pd.date_range(
        start=last_date, 
        periods=days_to_forecast + 1, 
        freq='D'
    )[1:]

    # Create forecast values using the last 7 days trend
    last_week_trend = ema[-7:].mean()
    forecast_values = [last_week_trend] * days_to_forecast

    # Create visualization
    fig = go.Figure()

    # Historical data
    fig.add_trace(go.Scatter(
        x=daily_demand.index,
        y=daily_demand.values,
        name='Actual Demand',
        mode='lines+markers'
    ))

    # Moving average
    fig.add_trace(go.Scatter(
        x=ma.index,
        y=ma.values,
        name='7-Day Moving Average',
        line=dict(dash='dash')
    ))

    # Exponential moving average
    fig.add_trace(go.Scatter(
        x=ema.index,
        y=ema.values,
        name='Exponential Moving Average',
        line=dict(dash='dot')
    ))

    # Forecast
    fig.add_trace(go.Scatter(
        x=forecast_dates,
        y=forecast_values,
        name='Forecast',
        line=dict(dash='dashdot')
    ))

    fig.update_layout(
        title='Demand Forecast Analysis',
        xaxis_title='Date',
        yaxis_title='Quantity',
        showlegend=True
    )

    return fig
</file>

<file path="pyproject.toml">
[project]
name = "repl-nix-workspace"
version = "0.1.0"
description = "Add your description here"
requires-python = ">=3.11"
dependencies = [
    "barcode>=1.0.4",
    "numpy>=2.2.3",
    "pandas>=2.2.3",
    "pillow>=11.1.0",
    "plotly>=6.0.0",
    "python-barcode>=0.15.1",
    "streamlit-option-menu>=0.4.0",
    "streamlit>=1.43.1",
    "trafilatura>=2.0.0",
]
</file>

<file path="barcode_handler.py">
import barcode
from barcode.writer import ImageWriter
import io
import base64
import re
from barcode import *

class BarcodeHandler:
    @staticmethod
    def generate_barcode(value):
        # Generate Code128 barcode
        barcode_class = barcode.get_barcode_class('code128')
        rv = io.BytesIO()
        barcode_class(value, writer=ImageWriter()).write(rv)
        return base64.b64encode(rv.getvalue()).decode()

    @staticmethod
    def generate_unique_barcode(prefix="SP"):
        import random
        import string

        # Generate a random 8-character string
        random_part = ''.join(random.choices(string.digits, k=8))
        return f"{prefix}{random_part}"

    @staticmethod
    def validate_barcode(barcode):
        """
        Validate barcode format: 3 chars - 1 char - 4 digits (ABC-D-1234)
        
        Args:
            barcode (str): The barcode to validate
            
        Returns:
            tuple: (is_valid: bool, error_message: str)
        """
        if not isinstance(barcode, str):
            return False, "Barcode must be a string"
        
        pattern = r'^[A-Za-z]{3}-[A-Za-z]{1}-\d{4}$'
        print("barcode:", barcode)  # Add this temporarily
        if not re.fullmatch(pattern, barcode):
            return False, (
                "Invalid barcode format. "
                "Required format: ABC-D-1234 (3 letters, 1 letter, 4 digits)"
            )
        
        return True, "Barcode is valid"

    @staticmethod
    def get_part_by_barcode(data_manager, barcode_input):
        """Look up a part using its barcode"""
        try:
            df = data_manager.get_all_parts()
            part = df[df['barcode'] == barcode_input]
            if not part.empty:
                return True, part.iloc[0]
            return False, None
        except Exception as e:
            print(f"Error looking up barcode: {e}")
            return False, None
</file>

<file path="user_management.py">
import sqlite3
import hashlib
import pandas as pd
import secrets
from datetime import datetime
import streamlit as st
from data_manager import DataManager
from barcode_handler import BarcodeHandler

class UserManager:

    def __init__(self, db_path='inventory.db'):
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self.create_users_table()

    def get_all_users_with_departments(self):
        query = '''
            SELECT u.id, u.username, u.role, 
                   u.created_at, u.last_login, u.isactive,
                   d1.name as parent_department,
                   d2.name as child_department
            FROM users u
            LEFT JOIN departments d2 ON u.department_id = d2.id
            LEFT JOIN departments d1 ON d2.parent_id = d1.id
            ORDER BY u.role, u.username
        '''
        return pd.read_sql_query(query, self.conn)
    
    def get_parent_departments(self):
        query = "SELECT id, name FROM departments WHERE parent_id IS NULL"
        return pd.read_sql_query(query, self.conn)
    
    def get_child_departments(self, parent_id):
        if not parent_id:
            return pd.DataFrame(columns=['id', 'name'])
        query = "SELECT id, name FROM departments WHERE parent_id = ?"
        return pd.read_sql_query(query, self.conn, params=(parent_id,))
    
    def update_user(self, user_id, username, role, department_id=None, new_password=None):
        cursor = self.conn.cursor()
        try:
            if new_password:
                # Update password if provided
                password_hash, salt = self.hash_password(new_password)
                cursor.execute(
                    '''
                    UPDATE users 
                    SET username=?, role=?, department_id=?, 
                        password_hash=?, salt=?
                    WHERE id=?
                ''', (username, role, department_id, password_hash, salt, user_id))
            else:
                # Update without changing password
                #print("dept_id:", department_id)  # Add this temporarily
                cursor.execute('''
                    UPDATE users 
                    SET username=?, role=?, department_id=?
                    WHERE id=?
                ''', (username, role, department_id, user_id))
                
            self.conn.commit()
            return True, None
        except sqlite3.Error as e:
            return False, str(e)
    
    def deactivate_user(self, user_id):
        cursor = self.conn.cursor()
        try:
            cursor.execute("UPDATE users SET isactive=0 WHERE id=?", (user_id,))
            self.conn.commit()
            return True, None
        except sqlite3.Error as e:
            return False, str(e)
    
    def activate_user(self, user_id):
        cursor = self.conn.cursor()
        try:
            cursor.execute("UPDATE users SET isactive=1 WHERE id=?", (user_id,))
            self.conn.commit()
            return True, None
        except sqlite3.Error as e:
            return False, str(e)

    def create_users_table(self):
        cursor = self.conn.cursor()
        try:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    salt TEXT NOT NULL,
                    role TEXT NOT NULL,
                    created_at TIMESTAMP,
                    last_login TIMESTAMP,
                    isactive boolean NOT NULL default 0
                )
            ''')
            self.conn.commit()
            # Create default admin user if not exists
            self.create_default_admin()
        except sqlite3.Error as e:
            print(f"Error creating users table: {e}")
            raise

    def create_default_admin(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users WHERE username = 'admin'")
        if cursor.fetchone()[0] == 0:
            self.register_user('admin', 'admin123', 'admin')

    def hash_password(self, password, salt=None):
        if salt is None:
            salt = secrets.token_hex(16)
        password_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'),
                                            salt.encode('utf-8'),
                                            100000).hex()
        return password_hash, salt

    def register_user(self, username, password, role='staff', department_id=None, isactive=True):
        cursor = self.conn.cursor()
        try:
            password_hash, salt = self.hash_password(password)
            cursor.execute(
                '''
                INSERT INTO users (username, password_hash, salt, role, created_at, department_id, isactive)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (username, password_hash, salt, role, datetime.now(), department_id, isactive))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def verify_user(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute(
            '''
            SELECT password_hash, salt, role, isactive, id, department_id FROM users WHERE username = ?
        ''', (username, ))
        result = cursor.fetchone()

        if result:
            stored_hash, salt, role, isactive, user_id, department_id = result
            password_hash, _ = self.hash_password(password, salt)
            if password_hash == stored_hash:
                if not isactive:
                    return False, None, None, None, "Account is inactive. Please contact administrator."
                # Update last login time
                cursor.execute(
                    '''
                    UPDATE users SET last_login = ? WHERE username = ?
                ''', (datetime.now(), username))
                self.conn.commit()
                return True, role, user_id, department_id, None
        return False, None, None, None, "Invalid username or password"

    def get_all_users(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, username, role, created_at, last_login 
            FROM users
        ''')
        return cursor.fetchall()

    def update_user_role(self, username, new_role):
        cursor = self.conn.cursor()
        try:
            cursor.execute(
                '''
                UPDATE users SET role = ? WHERE username = ?
            ''', (new_role, username))
            self.conn.commit()
            return True
        except sqlite3.Error:
            return False


def init_session_state():
    """Initialize all required session state variables"""
    required_vars = {
        'authenticated': False,
        'username': None,
        'user_role': None,
        'user_id': None,
        'user_manager': UserManager(),
        'data_manager': DataManager(),  # Add this line
        'barcode_handler': BarcodeHandler()  # Add this line
    }
    
    for var, default in required_vars.items():
        if var not in st.session_state:
            st.session_state[var] = default


def login_required(func):
    """Decorator to require login for accessing pages"""

    def wrapper(*args, **kwargs):
        init_session_state()
        if not st.session_state.authenticated:
            st.warning("Please log in to access this page")
            render_login_page()
            return
        return func(*args, **kwargs)

    return wrapper


def render_login_page():
    st.image("logo.png", width=100)
    st.write("")
    st.title("Ship Inventory Management System")

    # Initialize session state
    init_session_state()

    with st.form("login_form"):
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")

        if st.form_submit_button("Login"):
            if username and password:
                success, role, user_id, user_department_id, error_msg = st.session_state.user_manager.verify_user(
                    username, password)
                if success:
                    st.session_state.authenticated = True
                    st.session_state.username = username
                    st.session_state.user_role = role
                    st.session_state.user_id = user_id
                    st.session_state.user_department_id = user_department_id
                    st.success(f"Welcome back, {username}!")
                    st.rerun()
                else:
                    st.error(error_msg or "Invalid username or password")
            else:
                st.error("Please enter both username and password")
</file>

<file path="pages/admin.py">
import streamlit as st
import pandas as pd
from user_management import login_required
import navbar
from app_settings import set_page_configuration
from datetime import datetime

set_page_configuration()

current_page = "User Management"
st.header(current_page)

navbar.nav(current_page)

@login_required
def render_admin_page():
    if st.session_state.user_role in ['Admin', 'User']:
        st.error("You don't have permission to access this page")
        return
    
    tab1, tab2 = st.tabs(["Manage Users", "Add New User"])

    with tab1:
        #st.subheader("User Management")
        
        df = st.session_state.user_manager.get_all_users_with_departments()
        
        if not df.empty:
            # Display non-editable grid with status indicator
            st.dataframe(
                df[['id', 'username', 'role', 'isactive', 'parent_department', 'child_department']],
                column_config={
                    "id": "ID",
                    "username": "Username",
                    "role": "Role",
                    "isactive": st.column_config.CheckboxColumn(
                        "Active",
                        disabled=True,
                        help="User account status"
                    ),
                    "parent_department": "Parent Department",
                    "child_department": "Child Department"
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Edit user section
            st.subheader("Edit User")
            user_id = st.selectbox(
                "Select User to Edit",
                df['id'],
                format_func=lambda x: f"{df[df['id']==x]['username'].iloc[0]} ({df[df['id']==x]['role'].iloc[0]})"
            )
            
            if user_id:
                user_data = df[df['id'] == user_id].iloc[0]

                # Initialize department variables
                department_id = None
                current_parent = None
                current_child = None

                # Department selection (outside the form for proper cascading)
                if user_data['role'] == "User":
                    st.subheader("Department Assignment")
                    parent_depts = st.session_state.user_manager.get_parent_departments()
                    
                    # Safely get current parent department
                    if not pd.isna(user_data['parent_department']) and not parent_depts.empty:
                        parent_match = parent_depts[parent_depts['name'] == user_data['parent_department']]
                        current_parent = parent_match['id'].iloc[0] if not parent_match.empty else None
                    
                    # Parent department selection
                    selected_parent = st.selectbox(
                        "Parent Department",
                        parent_depts['id'].tolist(),
                        format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                        index=parent_depts['id'].tolist().index(current_parent) if current_parent is not None else 0,
                        key=f"parent_dept_{user_id}"
                    )
                    
                    # Child departments (will update when parent changes)
                    child_depts = st.session_state.user_manager.get_child_departments(selected_parent)
                    
                    # Safely get current child department
                    if not pd.isna(user_data['child_department']) and not child_depts.empty:
                        child_match = child_depts[child_depts['name'] == user_data['child_department']]
                        current_child = child_match['id'].iloc[0] if not child_match.empty else None
                    
                    if not child_depts.empty:
                        # Safely determine index
                        child_index = 0
                        if current_child is not None and current_child in child_depts['id'].tolist():
                            child_index = child_depts['id'].tolist().index(current_child)
                        
                        department_id = st.selectbox(
                            "Child Department",
                            child_depts['id'].tolist(),
                            format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                            index=child_index,
                            key=f"child_dept_{user_id}"
                        )
                    else:
                        st.warning("No child departments available")
                        department_id = None

                with st.form(f"edit_form_{user_id}"):
                    st.markdown("**Basic Information**")
                    new_username = st.text_input("Username", value=user_data['username'])
                    st.text_input("Role", value=user_data['role'], disabled=True)
                    new_role = user_data['role']  # Keep original role
                    
                    # Password change section
                    st.markdown("**Password Change**")
                    change_password = st.checkbox("Change password")
                    new_password = None
                    if change_password:
                        new_password = st.text_input("New Password", type="password")
                        confirm_password = st.text_input("Confirm Password", type="password")
                        if new_password and new_password != confirm_password:
                            st.error("Passwords do not match!")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.form_submit_button("Update"):
                            # Validate password change if requested
                            #print("department_id:", department_id)  # Add this temporarily
                            if change_password and not new_password:
                                st.error("Please enter a new password")
                            else:
                                # Update user information
                                success, message = st.session_state.user_manager.update_user(
                                    user_id=user_id,
                                    username=new_username,
                                    role=new_role,
                                    department_id=department_id if new_role == "User" else None,
                                    new_password=new_password if change_password else None
                                )
                                if success:
                                    st.toast("User updated successfully!", icon="✅")
                                    st.success("User updated successfully!")
                                    st.rerun()
                                else:
                                    st.error(f"Update failed: {message}")
                    with col2:
                        if st.form_submit_button("Deactivate" if user_data['isactive'] else "Activate"):
                            if user_id == st.session_state.get('user_id'):
                                st.error("You cannot deactivate your own account!")
                            else:
                                if user_data['isactive']:
                                    success, message = st.session_state.user_manager.deactivate_user(user_id)
                                else:
                                    success, message = st.session_state.user_manager.activate_user(user_id)
                                
                                if success:
                                    st.success("User status updated successfully!")
                                    st.toast("User status updated successfully!", icon="✅")
                                    st.rerun()
                                else:
                                    st.error(f"Operation failed: {message}")
        else:
            st.info("No users found")

    with tab2:
        st.subheader("Add New User")
        
        # Initialize form fields in session state
        if 'new_username' not in st.session_state:
            st.session_state.new_username = ""
        if 'new_password' not in st.session_state:
            st.session_state.new_password = ""
        if 'new_user_role' not in st.session_state:
            st.session_state.new_user_role = "User"
        if 'new_user_parent_dept' not in st.session_state:
            st.session_state.new_user_parent_dept = None
        if 'new_user_child_dept' not in st.session_state:
            st.session_state.new_user_child_dept = None
        if 'show_success' not in st.session_state:
            st.session_state.show_success = False
        
        # Show success toast if flag is set
        if st.session_state.show_success:
            st.toast("User added successfully!", icon="✅")
            st.session_state.show_success = False  # Reset the flag
        
        # Department selection
        role = st.selectbox(
            "Role*", 
            ["Super User", "Admin", "User"], 
            key="new_user_role_select",
            index=["Super User", "Admin", "User"].index(st.session_state.new_user_role)
        )
        
        if role == "User":
            st.markdown("**Department Assignment**")
            parent_depts = st.session_state.user_manager.get_parent_departments()
            selected_parent = st.selectbox(
                "Parent Department*",
                parent_depts['id'].tolist(),
                index=None,
                placeholder="Select Parent Department",
                format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                key="new_user_parent_dept_select"
            )
                
            if selected_parent:
                child_depts = st.session_state.user_manager.get_child_departments(selected_parent)
                if not child_depts.empty:
                    department_id = st.selectbox(
                        "Child Department*",
                        child_depts['id'].tolist(),
                        index=None,
                        placeholder="Select Child Department",
                        format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                        key="new_user_child_dept_select"
                    )
                else:
                    st.warning("No child departments available")
                    department_id = None

        with st.form("add_user_form"):
            new_username = st.text_input("Username*", value=st.session_state.new_username, key="new_username_input")
            new_password = st.text_input("Password*", type="password", value=st.session_state.new_password, key="new_password_input")
            
            submit_button = st.form_submit_button(label='Submit')

            if submit_button:
                if not new_username or not new_password:
                    st.error("Please fill in all required fields (marked with *)")
                elif role == "User" and not department_id:
                    st.error("Please select a child department for user")
                else:
                    if st.session_state.user_manager.register_user(
                            username=new_username,
                            password=new_password,
                            role=role,
                            department_id=department_id if role == "User" else None, isactive=True):
                        
                        # Set success flag and clear form
                        st.session_state.show_success = True
                        st.session_state.new_username = ""
                        st.session_state.new_password = ""
                        st.session_state.new_user_role = "User"
                        st.session_state.new_user_parent_dept = None
                        st.session_state.new_user_child_dept = None
                        
                        # Rerun to show toast and clear form
                        st.rerun()
                    else:
                        st.error("Username already exists")
                        st.toast("Username already exists!", icon="✅")

if __name__ == "__main__":
    render_admin_page()
</file>

<file path="pages/reports.py">
import streamlit as st
from data_manager import DataManager
from utils import create_stock_level_chart, create_transaction_trend, format_transaction_table
import pandas as pd
from user_management import login_required
import navbar
from app_settings import set_page_configuration

set_page_configuration()

current_page = "Reports"
st.header(current_page)

navbar.nav(current_page)


@login_required
def render_reports_page():
    #st.title("Reports and Analytics")
    # Get current user's department from session state
    current_user_dept_id = st.session_state.get('user_department_id')

    tab1, tab2, tab3 = st.tabs(
        ["Stock Levels", "Transaction History", "Export Data"])

    with tab1:
        if st.session_state.user_role == 'User':
            # For regular users, only show items from their department
            if not current_user_dept_id:
                st.error("You are not assigned to any department. Please contact administrator.")
                return
            #print("dept_id:", current_user_dept_id)  # Add this temporarily
            # Show department info
            dept_info = st.session_state.data_manager.get_department_info(current_user_dept_id)
            #print("dept_info:", dept_info)  # Add this temporarily
            if dept_info is not None and not dept_info.empty:
                st.subheader(f"Inventory for {dept_info['child_department']} Department")
            
            # Get items only for user's department
            df = st.session_state.data_manager.get_parts_by_department(current_user_dept_id)
        else:
            selected_child = ""
            cols = st.columns(2)

            with cols[0]:
                # Department selection
                parent_depts = st.session_state.data_manager.get_parent_departments()
                if parent_depts.empty:
                    st.error("No departments found. Please create departments first.")
                    return
                
                selected_parent = st.selectbox(
                    "Select Parent Department*",
                    parent_depts['id'].tolist(),
                    index=0,
                    placeholder="Select Parent Department",
                    format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                    key = "ListParentDept"
                )
            
            with cols[1]:
                child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
                if not child_depts.empty:                                
                    selected_child = st.selectbox(
                        "Select Child Department*",
                        child_depts['id'].tolist(),
                        index=0,
                        placeholder="Select Child Department",
                        format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                        key = "ListChildDept"
                    )
            df = st.session_state.data_manager.get_parts_by_department(selected_child)

        #df = st.session_state.data_manager.get_all_parts()
        if not df.empty:
            fig = create_stock_level_chart(df)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("No inventory data available")

    with tab2:
        if st.session_state.user_role in ['Admin', 'Super User']:
            selected_child = ""
            cols = st.columns(2)

            with cols[0]:
                # Department selection
                parent_depts = st.session_state.data_manager.get_parent_departments()
                if parent_depts.empty:
                    st.error("No departments found. Please create departments first.")
                    return
                
                selected_parent = st.selectbox(
                    "Select Parent Department*",
                    parent_depts['id'].tolist(),
                    index=0,
                    placeholder="Select Parent Department",
                    format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                    key = "TranParentDept"
                )
            
            with cols[1]:
                child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
                if not child_depts.empty:                                
                    selected_child = st.selectbox(
                        "Select Child Department*",
                        child_depts['id'].tolist(),
                        index=0,
                        placeholder="Select Child Department",
                        format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                        key = "TranChildDept"
                    )
        days = st.slider("Select time period (days)", 1, 90, 30)
        if st.session_state.user_role == 'User':
            # For regular users, only show items from their department
            if not current_user_dept_id:
                st.error("You are not assigned to any department. Please contact administrator.")
                return
            #print("dept_id:", current_user_dept_id)  # Add this temporarily
            # Show department info
            dept_info = st.session_state.data_manager.get_department_info(current_user_dept_id)
            #print("dept_info:", dept_info)  # Add this temporarily
            if dept_info is not None and not dept_info.empty:
                st.subheader(f"Inventory for {dept_info['child_department']} Department")
            
            # Get items only for user's department
            transactions = st.session_state.data_manager.get_transaction_history_by_department(current_user_dept_id, days)
        else:            
            transactions = st.session_state.data_manager.get_transaction_history_by_department(selected_child, days)

        if not transactions.empty:
            fig = create_transaction_trend(transactions)
            st.plotly_chart(fig, use_container_width=True)

            st.subheader("Transaction Details")
            formatted_transactions = format_transaction_table(transactions)
            st.dataframe(formatted_transactions, hide_index=True)
        else:
            st.info("No transaction data available")

    with tab3:
        #st.subheader("Export Data")
        if st.session_state.user_role in ['Admin', 'Super User']:
            selected_child = ""
            cols = st.columns(2)

            with cols[0]:
                # Department selection
                parent_depts = st.session_state.data_manager.get_parent_departments()
                if parent_depts.empty:
                    st.error("No departments found. Please create departments first.")
                    return
                
                selected_parent = st.selectbox(
                    "Select Parent Department*",
                    parent_depts['id'].tolist(),
                    index=0,
                    placeholder="Select Parent Department",
                    format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                    key = "ExpParentDept"
                )
            
            with cols[1]:
                child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
                if not child_depts.empty:                                
                    selected_child = st.selectbox(
                        "Select Child Department*",
                        child_depts['id'].tolist(),
                        index=0,
                        placeholder="Select Child Department",
                        format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                        key = "ExpChildDept"
                    )

        export_type = st.radio(
            "Select data to export",
            ["Inventory", "Transactions", "Low Stock Items"])

        if st.button("Generate Export"):
            if export_type == "Inventory":
                if st.session_state.user_role == 'User':
                    # For regular users, only show items from their department
                    if not current_user_dept_id:
                        st.error("You are not assigned to any department. Please contact administrator.")
                        return
                    #print("dept_id:", current_user_dept_id)  # Add this temporarily
                    # Show department info
                    dept_info = st.session_state.data_manager.get_department_info(current_user_dept_id)
                    #print("dept_info:", dept_info)  # Add this temporarily
                    if dept_info is not None and not dept_info.empty:
                        st.subheader(f"Inventory for {dept_info['child_department']} Department")
                    
                    # Get items only for user's department
                    data = st.session_state.data_manager.get_parts_by_department(current_user_dept_id)
                else:                    
                    data = st.session_state.data_manager.get_parts_by_department(selected_child)
                #data = st.session_state.data_manager.get_all_parts()
            elif export_type == "Transactions":
                if st.session_state.user_role == 'User':
                    # For regular users, only show items from their department
                    if not current_user_dept_id:
                        st.error("You are not assigned to any department. Please contact administrator.")
                        return
                    #print("dept_id:", current_user_dept_id)  # Add this temporarily
                    # Show department info
                    dept_info = st.session_state.data_manager.get_department_info(current_user_dept_id)
                    #print("dept_info:", dept_info)  # Add this temporarily
                    if dept_info is not None and not dept_info.empty:
                        st.subheader(f"Inventory for {dept_info['child_department']} Department")
                    
                    # Get items only for user's department
                    data = st.session_state.data_manager.get_transaction_history_by_department(current_user_dept_id)
                else:
                    data = st.session_state.data_manager.get_transaction_history_by_department(selected_child)
            else:
                if st.session_state.user_role == 'User':
                    data = st.session_state.data_manager.get_low_stock_items_by_dept(st.session_state.get('user_department_id'))
                else:
                    data = st.session_state.data_manager.get_low_stock_items_by_dept(selected_child)

            if not data.empty:
                csv = data.to_csv(index=False)
                st.download_button(
                    label="Download CSV",
                    data=csv,
                    file_name=f"{export_type.lower()}_export.csv",
                    mime="text/csv")
            else:
                st.warning("No data available for export")


if __name__ == "__main__":
    render_reports_page()
</file>

<file path=".streamlit/config.toml">
[server]
headless = true
address = "0.0.0.0"
port = 8501
#port = 8501 for hosting on streamlit community cloud
#port = 5000 for local development

[theme]
primaryColor = "#0066cc"
backgroundColor = "#ffffff"
secondaryBackgroundColor = "#f0f2f6"
textColor = "#262730"

[ui]
hideTopBar = true

[client]
showSidebarNavigation = false
toolbarMode = "minimal"
</file>

<file path="navbar.py">
import streamlit as st
from time import sleep
from streamlit_option_menu import option_menu
from user_management import init_session_state, render_login_page
import base64
from data_manager import DataManager

# Initialize session state
init_session_state()

# Define the pages and their file paths
pages = {
    'Home': 'main.py',
    'User Management': 'pages/admin.py',
    'Departments': 'pages/departments.py',
    'Analytics': 'pages/analytics.py',
    'Inventory': 'pages/inventory.py',
    'Operations': 'pages/operations.py',
    'Reports': 'pages/reports.py',
    'Logout': 'main.py'
}

icons = [
    'house', 'people-fill', 'building', 'graph-up-arrow', 'gear', 'toggles',
    'clipboard2-data', 'box-arrow-right'
]

# Create a list of the page names
page_list = list(pages.keys())


def nav(current_page=page_list[0]):
    # Initialize selected variable
    selected = None
    # Initialize session state if not already done
    if 'authenticated' not in st.session_state:
        init_session_state()

    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()

    with st.sidebar:
        #st.image("logo.png", width=100)
        add_logo()
        st.write("")

        if st.session_state.authenticated:
            # Safe session state access
            username = st.session_state.get('username', 'Guest')  # Default to 'Guest' if not set
            st.write(f"Logged in as: {username}")
            #st.write(f"Logged in as: {st.session_state.username}")
            #st.write(f"Role: {st.session_state.user_role}")
            role = st.session_state.get('user_role', '')  # Default to 'Guest' if not set
            st.write(f"Role: {role}")

            # Safely check for low stock items
            if 'data_manager' in st.session_state:
                try:
                    # Alert Section in Sidebar
                    if st.session_state.user_role == 'User':
                        lpl_stock = st.session_state.data_manager.get_last_piece_stock_items_by_dept(st.session_state.get('user_department_id'))
                    else:
                        lpl_stock = st.session_state.data_manager.get_last_piece_stock_items()
                    if not lpl_stock.empty:
                        st.error(
                            f"🚨 {len(lpl_stock)} - Last Piece Level!")
                        with st.expander("View Last Piece Level Stock Alerts"):
                            for _, item in lpl_stock.iterrows():
                                st.warning(f"""
                                    **{item['name']}**
                                    - Current: {item['quantity']}
                                    - Minimum: {item['min_order_level']}
                                    - Order Quantity: {item['min_order_quantity']}
                                """)

                    if st.session_state.user_role == 'User':
                        low_stock = st.session_state.data_manager.get_low_stock_items_by_dept(st.session_state.get('user_department_id'))
                    else:
                        low_stock = st.session_state.data_manager.get_low_stock_items()
                    if not low_stock.empty:
                        st.error(
                            f"🚨 {len(low_stock)} items below minimum stock level!")
                        with st.expander("View Low Stock Alerts"):
                            for _, item in low_stock.iterrows():
                                st.warning(f"""
                                    **{item['name']}**
                                    - Current: {item['quantity']}
                                    - Minimum: {item['min_order_level']}
                                    - Order Quantity: {item['min_order_quantity']}
                                """)
                except Exception as e:
                    st.error(f"Error checking stock levels: {str(e)}")

            user_role = st.session_state.get('user_role', 'user')
            #print("user_role:", user_role)  # Add this temporarily
            if user_role == 'Super User':
                visible_pages = list(pages.keys())
                visible_icons = icons
            elif user_role == 'Admin':
                # Exclude User Management and Departments
                visible_pages = [p for p in pages.keys() 
                            if p not in ['User Management', 'Departments']]
                visible_icons = [icon for icon, p in zip(icons, pages.keys())
                            if p not in ['User Management', 'Departments']]
            elif user_role == 'User':
                visible_pages = ['Inventory', 'Reports', 'Logout']
                visible_icons = ['gear', 'clipboard2-data', 'box-arrow-right']
            else:
                visible_pages = []
                visible_icons = []


            #print("visible_pages list 2:", visible_pages)  # Add this temporarily
            # Create the menu
            if visible_pages:
                selected = option_menu(
                    "Menu",
                    visible_pages,
                    icons=visible_icons,
                    default_index=visible_pages.index(current_page) if current_page in visible_pages else 0,
                    orientation="vertical"
                )
                
                # Handle logout
                if selected == "Logout":
                    #st.session_state.clear()  # Clear all session state
                    # Clear session state
                    for key in list(st.session_state.keys()):
                        del st.session_state[key]
                    st.rerun()   # Rerun to show login page

                if current_page != selected:
                    st.switch_page(pages[selected])
        #else:
            # Show login page without sidebar
            #st.set_page_config(layout="centered")
            #render_login_page()


def make_sidebar(current_page=page_list[0]):
    # Initialize selected variable
    selected = None

    # Initialize session state if not already done
    if 'authenticated' not in st.session_state:
        init_session_state()

    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()

    with st.sidebar:
        #st.image("logo.png", width=100)
        add_logo()
        st.write("")
        #print("visible_pages list:")  # Add this temporarily
        if st.session_state.authenticated:
            st.write(f"Logged in as: {st.session_state.username}")
            st.write(f"Role: {st.session_state.user_role}")
            #print("Page list:", page_list)  # Add this temporarily
            
            # Safely check for low stock items
            if 'data_manager' in st.session_state:
                try:
                    # Alert Section in Sidebar
                    if st.session_state.user_role == 'User':
                        lpl_stock = st.session_state.data_manager.get_last_piece_stock_items_by_dept(st.session_state.get('user_department_id'))
                    else:
                        lpl_stock = st.session_state.data_manager.get_last_piece_stock_items()
                    if not lpl_stock.empty:
                        st.error(
                            f"🚨 {len(lpl_stock)} - Last Piece Level!")
                        with st.expander("View Last Piece Level Stock Alerts"):
                            for _, item in lpl_stock.iterrows():
                                st.warning(f"""
                                    **{item['name']}**
                                    - Current: {item['quantity']}
                                    - Minimum: {item['min_order_level']}
                                    - Order Quantity: {item['min_order_quantity']}
                                """)
                                
                    if st.session_state.user_role == 'User':
                        low_stock = st.session_state.data_manager.get_low_stock_items_by_dept(st.session_state.get('user_department_id'))
                    else:
                        low_stock = st.session_state.data_manager.get_low_stock_items()
                    if not low_stock.empty:
                        st.error(
                            f"🚨 {len(low_stock)} items below minimum stock level!")
                        with st.expander("View Low Stock Alerts"):
                            for _, item in low_stock.iterrows():
                                st.warning(f"""
                                    **{item['name']}**
                                    - Current: {item['quantity']}
                                    - Minimum: {item['min_order_level']}
                                    - Order Quantity: {item['min_order_quantity']}
                                """)
                except Exception as e:
                    st.error(f"Error checking stock levels: {str(e)}")

            user_role = st.session_state.get('user_role', 'user')
            #print("user_role:", user_role)  # Add this temporarily
            if user_role == 'Super User':
                visible_pages = list(pages.keys())
                visible_icons = icons
            elif user_role == 'Admin':
                # Exclude User Management and Departments
                visible_pages = [p for p in pages.keys() 
                            if p not in ['User Management', 'Departments']]
                visible_icons = [icon for icon, p in zip(icons, pages.keys())
                            if p not in ['User Management', 'Departments']]
            elif user_role == 'User':
                visible_pages = ['Inventory', 'Reports', 'Logout']
                visible_icons = ['gear', 'clipboard2-data', 'box-arrow-right']
            else:
                visible_pages = []
                visible_icons = []


            #print("visible_pages list 2:", visible_pages)  # Add this temporarily
            # Create the menu
            if visible_pages:
                selected = option_menu(
                    "Menu",
                    visible_pages,
                    icons=visible_icons,
                    default_index=visible_pages.index(current_page) if current_page in visible_pages else 0,
                    orientation="vertical"
                )
                
                # Handle logout
                if selected == "Logout":
                    #st.session_state.clear()  # Clear all session state
                    # Clear session state
                    for key in list(st.session_state.keys()):
                        del st.session_state[key]
                    st.rerun()   # Rerun to show login page

                if current_page != selected:
                    st.switch_page(pages[selected])
        else:
            # Show login page without sidebar
            st.set_page_config(layout="centered")
            render_login_page()

            

        #elif current_page != p:
        # If anyone tries to access a secret page without being logged in,
        # redirect them to the login page
        #st.switch_page("login.py")
        #   render_login_page()


def logout():
    st.session_state.logged_in = False
    # Clear session state
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.info("Logged out successfully!")
    sleep(0.5)
    render_login_page()

def get_base64_of_bin_file(png_file: str) -> str:
    with open(png_file, "rb") as f:
        return base64.b64encode(f.read()).decode()

@st.cache_resource
def build_markup_for_logo(png_file: str) -> str:
    binary_string = get_base64_of_bin_file(png_file)
    return f"""
            <style>
                [data-testid="stSidebarHeader"] {{
                    background-image: url("data:image/png;base64,{binary_string}");
                    background-repeat: no-repeat;
                    background-size: contain;
                    background-position: top center;
                }}
            </style>
            """

def add_logo():
    st.markdown(
        build_markup_for_logo("logo.png"),
        unsafe_allow_html=True,
    )

#st.switch_page("login.py")
</file>

<file path="pages/analytics.py">
import streamlit as st
import pandas as pd
from utils import (create_demand_forecast_chart, calculate_reorder_point,
                   calculate_stock_turnover)
from user_management import login_required, init_session_state, render_login_page
import navbar
from app_settings import set_page_configuration
from data_manager import DataManager

set_page_configuration()

current_page = "Analytics"
st.header(current_page)

navbar.nav(current_page)


@login_required
def render_analytics_page():
    #st.title("Advanced Analytics and Forecasting")
    selected_child = ""
    cols = st.columns(2)

    with cols[0]:
        # Department selection
        parent_depts = st.session_state.data_manager.get_parent_departments()
        if parent_depts.empty:
            st.error("No departments found. Please create departments first.")
            return
        
        selected_parent = st.selectbox(
            "Select Parent Department*",
            parent_depts['id'].tolist(),
            index=0,
            placeholder="Select Parent Department",
            format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
            key = "ListParentDept"
        )
    
    with cols[1]:
        child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
        if not child_depts.empty:                                
            selected_child = st.selectbox(
                "Select Child Department*",
                child_depts['id'].tolist(),
                index=0,
                placeholder="Select Child Department",
                format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                key = "ListChildDept"
            )

    if selected_child is not None:

        # Get data
        df = st.session_state.data_manager.get_parts_by_department(selected_child)
        transactions = st.session_state.data_manager.get_transaction_history_by_department(selected_parent, days=90)

        if df.empty:
            st.warning("No inventory data available for analysis")
            return

        # Part selection
        selected_part = st.selectbox("Select Part for Analysis",
                                    df['description'].tolist())

        if selected_part:
            part_data = df[df['description'] == selected_part].iloc[0]
            part_id = part_data['id']

            # Display current metrics
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric(
                    "Current Stock",
                    int(part_data['quantity'])  # Convert to Python int
                )

            with col2:
                reorder_point = calculate_reorder_point(transactions, part_id)
                st.metric(
                    "Suggested Reorder Point",
                    reorder_point,
                    delta=int(part_data['quantity']) -
                    reorder_point  # Convert to Python int
                )

            with col3:
                turnover = calculate_stock_turnover(
                    transactions[transactions['part_id'] == part_id],
                    int(part_data['quantity'])  # Convert to Python int
                )
                st.metric("Stock Turnover Rate", f"{turnover}/year")

            # Demand Forecast Chart
            st.subheader("Demand Forecast Analysis")
            forecast_days = st.slider("Forecast Period (Days)",
                                    min_value=7,
                                    max_value=90,
                                    value=30)

            forecast_chart = create_demand_forecast_chart(
                transactions, part_id, days_to_forecast=forecast_days)

            if forecast_chart:
                st.plotly_chart(forecast_chart, use_container_width=True)

                # Analysis insights
                st.subheader("Inventory Insights")

                # Stock status
                if part_data['quantity'] <= reorder_point:
                    st.warning(f"""
                        🚨 Stock Alert: Current stock ({int(part_data['quantity'])}) is at or below
                        the recommended reorder point ({reorder_point}).
                        Consider restocking soon.
                    """)

                # Turnover analysis
                if turnover < 1:
                    st.info("💡 Low turnover rate indicates slow-moving inventory.")
                elif turnover > 12:
                    st.info(
                        "💡 High turnover rate indicates fast-moving inventory.")

                # Forecast interpretation
                st.info("""
                    📊 The forecast shown above uses:
                    - 7-day moving average (dashed line)
                    - Exponential smoothing (dotted line)
                    - Trend-based projection (dash-dot line)

                    The forecast considers historical demand patterns and recent trends.
                """)
            else:
                st.info("Insufficient transaction history for forecasting")


if __name__ == "__main__":
    if not st.session_state.authenticated:
        render_login_page()
    else:
        render_analytics_page()
</file>

<file path="data_manager.py">
import sqlite3
from contextlib import contextmanager
import pandas as pd
from datetime import datetime
import os
from barcode_handler import BarcodeHandler

class DataManager:

    def __init__(self):
        # Ensure database directory exists
        self.db_path = 'inventory.db'
        self.conn = sqlite3.connect(self.db_path, check_same_thread=False,
                               timeout=10)
        self.create_tables()
        print(f"Connected to database at {self.db_path}")

    @contextmanager
    def get_cursor(self):
        cursor = self.conn.cursor()
        try:
            yield cursor
        finally:
            cursor.close()

    def close(self):
        if hasattr(self, 'conn') and self.conn:
            self.conn.close()
            print("Database connection closed")
            
    def create_tables(self):
        with self.get_cursor() as cursor:
            try:
                # Create departments table (add this)
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS departments (
                        id INTEGER PRIMARY KEY,
                        code TEXT UNIQUE NOT NULL,
                        name TEXT NOT NULL,
                        parent_id INTEGER,
                        FOREIGN KEY (parent_id) REFERENCES departments (id)
                    )
                ''')

                # Create spare parts table
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS spare_parts (
                        id INTEGER PRIMARY KEY,
                        part_number TEXT UNIQUE,
                        name TEXT,
                        description TEXT,
                        quantity INTEGER,
                        line_no INTEGER,
                        yard_no INTEGER,
                        page_no TEXT,
                        order_no TEXT,
                        material_code TEXT,
                        ilms_code TEXT,
                        item_denomination TEXT,
                        mustered BOOLEAN,
                        department_id INTEGER,
                        compartment_no TEXT,
                        box_no TEXT,
                        remark TEXT,
                        min_order_level INTEGER,
                        min_order_quantity INTEGER,
                        barcode TEXT UNIQUE,
                        last_updated TIMESTAMP
                    )
                ''')

                # Create transactions table
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS transactions (
                        id INTEGER PRIMARY KEY,
                        part_id INTEGER,
                        transaction_type TEXT,
                        quantity INTEGER,
                        timestamp TIMESTAMP,
                        reason TEXT,
                        remarks TEXT,
                        FOREIGN KEY (part_id) REFERENCES spare_parts (id)
                    )
                ''')

                self.conn.commit()
                print("Database tables created successfully")
            except sqlite3.Error as e:
                print(f"Error creating tables: {e}")
                raise

    def update_department(self, dept_id, code, name, parent_id=None):
        with self.get_cursor() as cursor:
            try:
                # Prevent circular references
                if parent_id == dept_id:
                    return False, "Department cannot be its own parent"
                    
                cursor.execute('''
                    UPDATE departments 
                    SET code=?, name=?, parent_id=?
                    WHERE id=?
                ''', (code, name, parent_id, dept_id))
                self.conn.commit()
                return True, None
            except sqlite3.Error as e:
                return False, str(e)

    def delete_department(self, dept_id):
        with self.get_cursor() as cursor:
            try:
                # Check if department has children
                cursor.execute("SELECT COUNT(*) FROM departments WHERE parent_id=?", (dept_id,))
                child_count = cursor.fetchone()[0]
                if child_count > 0:
                    return False, "Cannot delete department with child departments"

                # Check if department is used in spare_parts
                cursor.execute("SELECT COUNT(*) FROM spare_parts WHERE department_id=?", (dept_id,))
                part_count = cursor.fetchone()[0]
                if part_count > 0:
                    return False, f"Cannot delete department - {part_count} inventory items reference it"

                cursor.execute("DELETE FROM departments WHERE id=?", (dept_id,))
                self.conn.commit()
                return True, None
            except sqlite3.Error as e:
                return False, str(e)

    def add_department(self, code, name, parent_id=None):
        with self.get_cursor() as cursor:
            try:
                cursor.execute('''
                    INSERT INTO departments (code, name, parent_id)
                    VALUES (?, ?, ?)
                ''', (code, name, parent_id))
                self.conn.commit()
                return True
            except sqlite3.IntegrityError:
                return False

    def get_all_departments_as_df(self):
        with self.get_cursor() as cursor:
            try:
                """Returns department data as a pandas DataFrame"""
                query = '''
                    SELECT d1.id, d1.code, d1.name, 
                        COALESCE(d2.name, 'Top Level') as parent_name
                    FROM departments d1
                    LEFT JOIN departments d2 ON d1.parent_id = d2.id
                    ORDER BY COALESCE(d1.parent_id, d1.id), d1.id
                '''
                return pd.read_sql_query(query, self.conn)
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving parts: {e}")
                return pd.DataFrame()

    def get_parent_options(self):
        with self.get_cursor() as cursor:
            """Returns options for parent department dropdown"""
            cursor = self.conn.cursor()
            cursor.execute('''
                SELECT id, name FROM departments WHERE parent_id IS NULL
            ''')
            return cursor.fetchall()
    
    def get_department_info(self, department_id):
        with self.get_cursor() as cursor:
            """Get department hierarchy info for a department ID"""
            query = '''
                SELECT d1.name as parent_department,
                    d2.name as child_department
                FROM departments d2
                LEFT JOIN departments d1 ON d2.parent_id = d1.id
                WHERE d2.id = ?
            '''
            result = pd.read_sql_query(query, self.conn, params=(department_id,))
            return result.iloc[0] if not result.empty else None
    
    def get_parent_departments(self):
        with self.get_cursor() as cursor:
            """Get all parent departments"""
            query = "SELECT id, name FROM departments WHERE parent_id IS NULL"
            return pd.read_sql_query(query, self.conn)

    def get_child_departments(self, parent_id):
        """Get child departments for a given parent"""
        if not parent_id:
            return pd.DataFrame(columns=['id', 'name'])
        query = "SELECT id, name FROM departments WHERE parent_id = ?"
        return pd.read_sql_query(query, self.conn, params=(parent_id,))
    
    def bulk_import_spare_parts(self, df, department_id, parent_dept_id):
        """Bulk import spare parts from DataFrame with department assignment"""
        
        results = []
        with self.get_cursor() as cursor:  # Use context manager
            try:
                records = df.to_dict('records')
                cursor.execute("BEGIN TRANSACTION")            
                
                for idx, record in enumerate(records, start=1):
                    result = {
                        'row_number': idx,
                        'part_number': record.get('part_number', ''),
                        'name': record.get('name', ''),
                        'status': 'pending',
                        'message': ''
                    }
                    
                    try:
                        # Validate required fields
                        if not record.get('part_number'):
                            raise ValueError("Part number is required")
                        if not record.get('name'):
                            raise ValueError("Name is required")
                        if not isinstance(record.get('quantity', 0), (int, float)):
                            raise ValueError("Quantity must be a number")
                        # Check barcode uniqueness if provided
                        if 'barcode' in record and record['barcode']:
                            cursor.execute("SELECT 1 FROM spare_parts WHERE barcode=?", (record['barcode'],))
                            if cursor.fetchone():
                                raise ValueError(f"Barcode {record['barcode']} already exists in database")
                        if not record.get('barcode'):
                            raise ValueError("Barcode is required")
                        # Generate barcode if not provided
                        #if 'barcode' not in record or pd.isna(record.get('barcode')) or not record.get('barcode'):
                            # Get last serial number from database
                        #    last_serial = get_last_serial_number(department_id)
                        #    record['barcode'] = BarcodeHandler.generate_unique_barcode()
                        
                        # Set default values
                        record['department_id'] = department_id
                        record['min_order_level'] = record.get('min_order_level', 0)
                        record['min_order_quantity'] = record.get('min_order_quantity', 1)
                        record['compartment_no'] = record.get('compartment_no', '')
                        record['last_updated'] = datetime.now()
                        
                        # Ensure all required fields have values
                        record['part_number'] = str(record['part_number'])
                        record['name'] = str(record['name'])
                        record['quantity'] = int(record['quantity'])
                        record['line_no'] = int(record.get('line_no', 0))
                        #record['yard_no'] = int(record.get('yard_no', 0))
                        
                        cursor.execute('''
                            INSERT OR REPLACE INTO spare_parts (
                                part_number, name, description, quantity,
                                line_no, page_no, order_no,
                                material_code, ilms_code, item_denomination,
                                mustered, department_id, compartment_no,
                                box_no, remark, min_order_level,
                                min_order_quantity, barcode, last_updated, status
                            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                        ''', (
                            record['part_number'],
                            record['name'],
                            record.get('description', ''),
                            record['quantity'],
                            record['line_no'],
                            str(record.get('page_no', '')),
                            str(record.get('order_no', '')),
                            str(record.get('material_code', '')),
                            str(record.get('ilms_code', '')),
                            str(record.get('item_denomination', '')),
                            bool(record.get('mustered', False)),
                            record['department_id'],
                            str(record.get('compartment_name', '')),
                            str(record.get('box_no', '')),
                            str(record.get('remark', '')),
                            int(record.get('min_order_level', 0)),
                            int(record.get('min_order_quantity', 1)),
                            record['barcode'],
                            record['last_updated'],
                            'In Store'
                        ))
                        result['status'] = 'success'
                        result['message'] = 'Imported successfully'
                    
                    except Exception as e:
                        self.conn.rollback()
                        cursor.execute("BEGIN TRANSACTION")  # Restart transaction for next record
                        result['status'] = 'failed'
                        result['message'] = str(e)
                        
                    results.append(result)
                
                self.conn.commit()
                return results, True, f"Successfully imported {len([r for r in results if r['status'] == 'success'])}/{len(records)} records"
            except Exception as e:
                self.conn.rollback()
                result = [{
                    'row_number': 0,
                    'part_number': '',
                    'name': '',
                    'status': 'failed',
                    'message': f"Global error: {str(e)}"
                }]
                return results, False, f"Error during import: {str(e)}"            
    
    def add_spare_part(self, part_data):
        with self.get_cursor() as cursor:
            try:
                cursor.execute(
                    '''
                    INSERT INTO spare_parts (part_number, name, description, quantity,
                    line_no, page_no, order_no, material_code, ilms_code, item_denomination,
                    mustered, department_id, compartment_no,  box_no, remark, 
                    min_order_level, min_order_quantity, barcode, last_updated, status,
                    last_maintenance_date, next_maintenance_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''',
                    (part_data['part_number'], part_data['name'],
                    part_data['description'], part_data['quantity'],
                    part_data['line_no'], part_data['page_no'], part_data['order_no'],
                    part_data['material_code'], part_data['ilms_code'],
                    part_data['item_denomination'], part_data['mustered'],
                    part_data['department_id'], part_data['compartment_no'],
                    part_data['box_no'], part_data['remark'],
                    part_data['min_order_level'], part_data['min_order_quantity'],
                    part_data['barcode'], datetime.now(), 
                    part_data['status'], part_data['last_maintenance_date'],
                    part_data['next_maintenance_date']))
                self.conn.commit()
                return True
            except sqlite3.IntegrityError:
                return False
            except sqlite3.Error as e:
                print(f"Error adding spare part: {e}")
                return False

    def update_spare_part(self, part_id, part_data):
        with self.get_cursor() as cursor:
            cursor.execute(
                '''
                UPDATE spare_parts 
                SET name=?, description=?, quantity=?, min_order_level=?,
                    min_order_quantity=?, last_updated=?, location=?, status=?,
                    last_maintenance_date=?, next_maintenance_date=?
                WHERE id=?
            ''', (part_data['name'], part_data['description'],
                part_data['quantity'], part_data['min_order_level'],
                part_data['min_order_quantity'], datetime.now(), part_data['location'],
                part_data['status'], part_data['last_maintenance_date'],
                part_data['next_maintenance_date'], part_id))
            self.conn.commit()

    def get_parts_by_department(self, department_id):
        """Get all parts for a specific department"""
        with self.get_cursor() as cursor:
            try:
                query = '''
                    SELECT sp.*, 
                        d1.name as parent_department,
                        d2.name as child_department
                    FROM spare_parts sp
                    LEFT JOIN departments d2 ON sp.department_id = d2.id
                    LEFT JOIN departments d1 ON d2.parent_id = d1.id
                    WHERE sp.department_id = ?
                    ORDER BY sp.name
                '''
                df =  pd.read_sql_query(query, self.conn, params=(department_id,))
                return df
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving parts: {e}")
                return pd.DataFrame()
    
    def get_all_parts(self):
        with self.get_cursor() as cursor:
            try:
                query = '''
                    SELECT s.*, 
                        dp.name as parent_department,
                        dc.name as child_department
                    FROM spare_parts s
                    LEFT JOIN departments dc ON s.department_id = dc.id
                    LEFT JOIN departments dp ON dc.parent_id = dp.id
                '''
                df = pd.read_sql_query(query, self.conn)
                return df
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving parts: {e}")
                return pd.DataFrame()

    def get_part_by_id(self, part_id):
        with self.get_cursor() as cursor:
            try:
                df = pd.read_sql_query(
                    f"SELECT * FROM spare_parts WHERE id= {part_id}", self.conn)
                if df.empty:
                    print(f"No part found with ID {part_id}")
                    return None
                return df
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving part {part_id}: {e}")
                return None
        
    def is_barcode_unique(self, barcode):
        with self.get_cursor() as cursor:
            """Check if barcode already exists"""
            query = "SELECT 1 FROM spare_parts WHERE barcode = ?"
            result = pd.read_sql_query(query, self.conn, params=(barcode,))
            return result.empty

    def get_last_serial_number(self, dept_id):
        with self.get_cursor() as cursor:
            """Get the highest serial number from existing barcodes"""
            query = f"""
            SELECT barcode FROM spare_parts 
            WHERE barcode LIKE '%-%-%' and department_id= {dept_id}
            ORDER BY barcode DESC 
            LIMIT 1
            """
            result = pd.read_sql_query(query, self.conn)
            
            if not result.empty:
                last_barcode = result.iloc[0]['barcode']
                try:
                    return int(last_barcode.split('-')[-1])
                except (IndexError, ValueError):
                    return 0
            return 0

    def get_last_piece_stock_items(self):
        with self.get_cursor() as cursor:
            try:
                return pd.read_sql_query(
                    "SELECT * FROM spare_parts WHERE quantity = 1",
                    self.conn)
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving low stock items: {e}")
                return pd.DataFrame()
        
    def get_last_piece_stock_items_by_dept(self, department_id):
        with self.get_cursor() as cursor:
            try:
                return pd.read_sql_query(
                    "SELECT * FROM spare_parts WHERE department_id = ?  AND quantity = 1",
                    self.conn, params=(department_id,))
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving low stock items: {e}")
                return pd.DataFrame()
        
    def get_low_stock_items(self):
        with self.get_cursor() as cursor:
            try:
                return pd.read_sql_query(
                    "SELECT * FROM spare_parts WHERE quantity <= min_order_level AND quantity > 1",
                    self.conn)
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving low stock items: {e}")
                return pd.DataFrame()
        
    def get_low_stock_items_by_dept(self, department_id):
        with self.get_cursor() as cursor:
            try:
                return pd.read_sql_query(
                    "SELECT * FROM spare_parts WHERE department_id = ? AND quantity <= min_order_level AND quantity > 1",
                    self.conn, params=(department_id,))
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving low stock items: {e}")
                return pd.DataFrame()

    def record_transaction(self, part_id, transaction_type, quantity, reason, remarks):
        with self.get_cursor() as cursor:
            try:
                # First verify the part exists and has enough stock
                # print(f"recording transaction: {part_id}")  # hari
                part_df = self.get_part_by_id(part_id)
                if part_df is None or part_df.empty:
                    raise ValueError(f"Part with ID {part_id} not found")

                part = part_df.iloc[0]
                current_quantity = int(part['quantity'])
                selected_part = int(part_id)

                if transaction_type == 'check_out' and current_quantity < quantity:
                    raise ValueError(
                        f"Insufficient stock. Available: {current_quantity}, Requested: {quantity}"
                    )

                # Record the transaction
                cursor.execute(
                    '''
                    INSERT INTO transactions (part_id, transaction_type, quantity, timestamp, reason, remarks)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (selected_part, transaction_type, quantity, datetime.now(), reason, remarks))

                print(f"Recorded transaction: {transaction_type}")

                # Update stock quantity
                update_quantity = -quantity if transaction_type == 'check_out' else quantity
                cursor.execute(
                    '''
                    UPDATE spare_parts 
                    SET quantity = quantity + ?, last_updated = ?
                    WHERE id = ?
                ''', (update_quantity, datetime.now(), selected_part))

                self.conn.commit()
                return True, None  # Success, no error message
            except (sqlite3.Error, ValueError) as e:
                print(f"Error recording transaction: {e}")
                self.conn.rollback()
                return False, str(e)  # Return error status and message

    def get_transaction_history(self, days=30):
        with self.get_cursor() as cursor:
            query = '''
                SELECT t.*, sp.name, sp.part_number, 
                    d1.name as parent_department,
                    d2.name as child_department
                FROM transactions t
                JOIN spare_parts sp ON t.part_id = sp.id
                LEFT JOIN departments d2 ON sp.department_id = d2.id
                LEFT JOIN departments d1 ON d2.parent_id = d1.id
                WHERE t.timestamp >= date('now', ?)
            '''
            try:
                return pd.read_sql_query(query,
                                        self.conn,
                                        params=[f'-{days} days'])
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving transaction history: {e}")
                return pd.DataFrame()
        
    def get_transaction_history_by_department(self, department_id, days=30):
        with self.get_cursor() as cursor:
            """Get all parts for a specific department"""
            try:
                cursor = self.conn.cursor()
                query = '''
                    SELECT t.*, sp.name, sp.part_number, 
                        d1.name as parent_department,
                        d2.name as child_department
                    FROM transactions t
                    JOIN spare_parts sp ON t.part_id = sp.id
                    LEFT JOIN departments d2 ON sp.department_id = d2.id
                    LEFT JOIN departments d1 ON d2.parent_id = d1.id
                    WHERE t.timestamp >= date('now', ?) and sp.department_id = ?
                    ORDER BY sp.name
                '''
                df =  pd.read_sql_query(query, self.conn, params=(f'-{days} days', department_id,))
                return df
            except pd.io.sql.DatabaseError as e:
                print(f"Error retrieving parts: {e}")
                return pd.DataFrame()
</file>

<file path="main.py">
import streamlit as st
from data_manager import DataManager
from barcode_handler import BarcodeHandler
from user_management import login_required, init_session_state, render_login_page
from navbar import make_sidebar
from app_settings import set_page_configuration #, add_logo_background
from io import BytesIO
set_page_configuration()



# Initialize alerts in session state
if 'alerts' not in st.session_state:
    st.session_state.alerts = []


@login_required
def main():

    # Initialize session state
    init_session_state()

    # Add the background logo (40% opacity = 0.4)
    #add_logo_background("logo.png", opacity=0.4)

    # Set page config (will be overridden by navbar if needed)
    #st.set_page_config(layout="centered")

    #if not st.session_state.get('authenticated', False):
    #    render_login_page()

    # Initialize data manager and barcode handler if needed
    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()
    if 'barcode_handler' not in st.session_state:
        st.session_state.barcode_handler = BarcodeHandler()

    st.title("Ship Inventory Management System")

    # Show user info in sidebar
    with st.sidebar:
        #st.write(f"Logged in as: {st.session_state.username}")
        #st.write(f"Role: {st.session_state.user_role}")

        # Alert Section in Sidebar
        #low_stock = st.session_state.data_manager.get_low_stock_items()
        #if not low_stock.empty:
        #    st.error(f"🚨 {len(low_stock)} items below minimum stock level!")
        #    with st.expander("View Low Stock Alerts"):
        #        for _, item in low_stock.iterrows():
        #            st.warning(f"""
        #                **{item['name']}**
        #                - Current: {item['quantity']}
        #                - Minimum: {item['min_order_level']}
        #                - Order Quantity: {item['min_order_quantity']}
        #            """)

        make_sidebar()

        #if st.button("Logout"):
        #    st.session_state.authenticated = False
        #    st.session_state.username = None
        #    st.session_state.user_role = None
        #    st.rerun()

    # Dashboard layout
    col1, col2 = st.columns(2)

    with col1:
        lpl_stock = st.session_state.data_manager.get_last_piece_stock_items()
        low_stock = st.session_state.data_manager.get_low_stock_items()
        st.subheader("Inventory Overview")
        df = st.session_state.data_manager.get_all_parts()
        total_parts = len(df)
        low_stock_count = len(low_stock)
        lpl_stock_count = len(lpl_stock)

        st.metric("Total Parts",
                  total_parts,
                  help="Total number of unique parts in inventory")
        st.metric("LPL Stock Items",
                  lpl_stock_count,
                  delta=lpl_stock_count,
                  delta_color="inverse",
                  help="Number of items below last piece level")
        st.metric("Low Stock Items",
                  low_stock_count,
                  delta=low_stock_count,
                  delta_color="inverse",
                  help="Number of items below minimum order level")

    with col2:
        st.subheader("Quick Actions")
        if st.button("View Last Piece Level Stock Alerts"):
            lpl_stock = st.session_state.data_manager.get_last_piece_stock_items()
            if not lpl_stock.empty:
                st.dataframe(lpl_stock[[
                    'name', 'part_number', 'quantity', 'min_order_level'
                ]],
                             hide_index=True)

                # Download low stock report
                csv = lpl_stock.to_csv(index=False)
                st.download_button(
                    "Download Last Piece Level Stock Report",
                    csv,
                    "last_piece_stock_report.csv",
                    "text/csv",
                    help="Download a CSV report of all last piece level stock items")
            else:
                st.success("All items are above last piece levels")

        if st.button("View Low Stock Items"):
            low_stock = st.session_state.data_manager.get_low_stock_items()
            if not low_stock.empty:
                st.dataframe(low_stock[[
                    'name', 'part_number', 'quantity', 'min_order_level'
                ]],
                             hide_index=True)

                # Download low stock report
                csv = low_stock.to_csv(index=False)
                st.download_button(
                    "Download Low Stock Report",
                    csv,
                    "low_stock_report.csv",
                    "text/csv",
                    help="Download a CSV report of all low stock items")
            else:
                st.success("All items are above minimum stock levels")

    # Recent Transactions
    st.subheader("Recent Transactions")
    recent_transactions = st.session_state.data_manager.get_transaction_history(
        days=7)
    if not recent_transactions.empty:
        st.dataframe(recent_transactions[[
            'timestamp', 'name', 'transaction_type', 'quantity'
        ]],
                     hide_index=True)
    else:
        st.info("No recent transactions found")

    # Close the main div at the end
    #st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    if 'authenticated' not in st.session_state:
        render_login_page()
    else:
        main()
</file>

<file path="pages/inventory.py">
import streamlit as st
import pandas as pd  # Add this import at the top
from data_manager import DataManager
from barcode_handler import BarcodeHandler
from user_management import login_required
import navbar
from datetime import datetime
from app_settings import set_page_configuration
import time

set_page_configuration()

current_page = "Inventory"
st.header(current_page)

navbar.nav(current_page)

@login_required
def render_inventory_page():

    # Initialize session state if needed
    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()
    if 'barcode_handler' not in st.session_state:
        st.session_state.barcode_handler = BarcodeHandler()
             
    # Initialize session state for department selection
    if 'selected_parent_dept' not in st.session_state:
        st.session_state.selected_parent_dept = None
    if 'selected_child_dept' not in st.session_state:
        st.session_state.selected_child_dept = None

    # Get current user's department from session state
    current_user_dept_id = st.session_state.get('user_department_id')
    
    # Create tabs - CORRECTED VERSION
    if st.session_state.user_role == 'User':
        tabs = st.tabs(["View Inventory"])
        view_tab = tabs[0]  # Get the first (and only) tab
    else:
        tabs = st.tabs(["View Inventory", "Add New Part", "Bulk Import"])
        view_tab, add_tab, bulk_tab = tabs  # Properly unpack the tabs

    with view_tab:        
        if st.session_state.user_role == 'User':
            # For regular users, only show items from their department
            if not current_user_dept_id:
                st.error("You are not assigned to any department. Please contact administrator.")
                return
            print("dept_id:", current_user_dept_id)  # Add this temporarily
            # Show department info
            dept_info = st.session_state.data_manager.get_department_info(current_user_dept_id)
            #print("dept_info:", dept_info)  # Add this temporarily
            if dept_info is not None and not dept_info.empty:
                st.subheader(f"Inventory for {dept_info['child_department']} Department")
            
            # Get items only for user's department
            df = st.session_state.data_manager.get_parts_by_department(current_user_dept_id)

            # Search and filter 
            search_term = st.text_input("Search parts by name, description, part_number, box_no, compartment_no, ilms_code or barcode")
            if search_term:
                df = df[df['name'].str.contains(search_term, case=False) |
                        df['description'].str.contains(search_term, case=False) |
                        df['part_number'].str.contains(search_term, case=False) |
                        df['barcode'].str.contains(search_term, case=False) |
                        df['ilms_code'].str.contains(search_term, case=False) |
                        df['compartment_no'].str.contains(search_term, case=False) |
                        df['box_no'].str.contains(search_term, case=False)]

            if not df.empty:
                st.dataframe(df[[
                    'part_number', 'name', 'quantity', 'parent_department', 'child_department', 
                    'line_no', 'description', 'page_no', 'order_no',
                    'material_code', 'ilms_code', 'item_denomination',
                    'mustered', 'compartment_no', 'box_no', 'remark',
                    'min_order_level', 'barcode',
                    'status', 'last_maintenance_date',
                    'next_maintenance_date'
                ]],
                column_config={
                    "mustered": st.column_config.CheckboxColumn("Mustered"),
                    "quantity": st.column_config.NumberColumn("Qty", format="%d")
                },
                use_container_width=True,
                hide_index=True)
            else:
                st.info("""
                📱 Stock information not available for selected department.
                """)
        else:
            selected_child = ""
            cols = st.columns(2)

            with cols[0]:
                # Department selection
                parent_depts = st.session_state.data_manager.get_parent_departments()
                if parent_depts.empty:
                    st.error("No departments found. Please create departments first.")
                    return
                
                selected_parent = st.selectbox(
                    "Select Parent Department*",
                    parent_depts['id'].tolist(),
                    index=None,
                    placeholder="Select Parent Department",
                    format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                    key = "ListParentDept"
                )
            
            with cols[1]:
                child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
                if not child_depts.empty:                                
                    selected_child = st.selectbox(
                        "Select Child Department*",
                        child_depts['id'].tolist(),
                        index=None,
                        placeholder="Select Child Department",
                        format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                        key = "ListChildDept"
                    )

            if selected_child is not None:
                df = st.session_state.data_manager.get_parts_by_department(selected_child)

                # Search and filter 
                search_term = st.text_input("Search parts by name, description, part_number, box_no, compartment_no, ilms_code or barcode")
                if search_term:
                    df = df[df['name'].str.contains(search_term, case=False) |
                            df['description'].str.contains(search_term, case=False) |
                            df['part_number'].str.contains(search_term, case=False) |
                            df['barcode'].str.contains(search_term, case=False) |
                            df['ilms_code'].str.contains(search_term, case=False) |
                            df['compartment_no'].str.contains(search_term, case=False) |
                            df['box_no'].str.contains(search_term, case=False)]

                if not df.empty:
                    st.dataframe(df[[
                        'part_number', 'name', 'quantity', 'parent_department', 'child_department', 
                        'line_no', 'description', 'page_no', 'order_no',
                        'material_code', 'ilms_code', 'item_denomination',
                        'mustered', 'compartment_no', 'box_no', 'remark',
                        'min_order_level', 'barcode',
                        'status', 'last_maintenance_date',
                        'next_maintenance_date'
                    ]],
                    column_config={
                        "mustered": st.column_config.CheckboxColumn("Mustered"),
                        "quantity": st.column_config.NumberColumn("Qty", format="%d")
                    },
                    use_container_width=True,
                    hide_index=True)
                else:
                    st.info("""
                    📱 Stock information not available for selected department.
                    """)

                if st.session_state.user_role in ['Admin', 'Super User']:
                    # Edit part
                    if not df.empty:
                        part_to_edit = st.selectbox("Select part to edit",
                                                    df['description'].tolist())
                        
                        # Define available status options
                        status_options = ["In Store", "Operational", "Under Maintenance"]
                        
                        if part_to_edit:
                            part_data = df[df['description'] == part_to_edit].iloc[0]
                            # Get current status (handle empty/NaN values)
                            current_status = str(part_data['status']).strip() if pd.notna(part_data['status']) else None
                            try:
                                # Handle empty/None values first
                                if pd.isna(part_data['last_maintenance_date']) or not part_data['last_maintenance_date']:
                                    last_default_date = None
                                else:
                                    # Convert to string and parse date
                                    date_str = str(part_data['last_maintenance_date']).strip()
                                    last_default_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                            except (ValueError, TypeError) as e:
                                #st.warning(f"Could not parse date: {part_data['last_maintenance_date']}. Error: {str(e)}")
                                last_default_date = None

                            try:
                                # Handle empty/None values first
                                if pd.isna(part_data['next_maintenance_date']) or not part_data['next_maintenance_date']:
                                    next_default_date = None
                                else:
                                    # Convert to string and parse date
                                    date_str = str(part_data['next_maintenance_date']).strip()
                                    next_default_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                            except (ValueError, TypeError) as e:
                                #st.warning(f"Could not parse date: {part_data['last_maintenance_date']}. Error: {str(e)}")
                                next_default_date = None

                            with st.form("edit_part_form"):
                                new_quantity = st.number_input("Quantity",
                                                            value=int(
                                                                part_data['quantity']),
                                                            min_value=0)
                                new_min_level = st.number_input(
                                    "Minimum Order Level",
                                    value=int(part_data['min_order_level']),
                                    min_value=0)
                                new_min_quantity = st.number_input(
                                    "Minimum Order Quantity",
                                    value=int(part_data['min_order_quantity']),
                                    min_value=1)                    
                                new_status = st.selectbox(
                                    "Status*",
                                    options=status_options,
                                    index=None if current_status not in status_options else status_options.index(current_status),
                                    placeholder="Select a status...",
                                    key=f"status_select_{part_data['id']}"
                                )
                                new_last_maintenance_date = st.date_input(
                                    "Last Maintenance Date (optional)",
                                    value=last_default_date,
                                    key=f"last_maint_{part_data['id']}"
                                )
                                new_next_maintenance_date = st.date_input(
                                    "Next Maintenance Date (optional)",
                                    value=next_default_date,
                                    key=f"next_maint_{part_data['id']}"
                                )

                                # Convert back to string for database
                                if new_last_maintenance_date:
                                    nlast_maint_date_str = new_last_maintenance_date.strftime('%Y-%m-%d')
                                else:
                                    nlast_maint_date_str = None
                                
                                if new_next_maintenance_date:
                                    nnext_maint_date_str = new_next_maintenance_date.strftime('%Y-%m-%d')
                                else:
                                    nnext_maint_date_str = None

                                if st.form_submit_button("Update Part"):
                                    if new_last_maintenance_date > datetime.now().date():
                                        st.error(
                                            "Last Maintenance Date should not be greater than the current date."
                                        )
                                    elif new_next_maintenance_date <= datetime.now().date(
                                    ):
                                        st.error(
                                            "Next Maintenance Date should be greater than the current date."
                                        )
                                    else:
                                        st.session_state.data_manager.update_spare_part(
                                            part_data['id'], {
                                                'name':
                                                part_data['name'],
                                                'description':
                                                part_data['description'],
                                                'quantity':
                                                new_quantity,
                                                'min_order_level':
                                                new_min_level,
                                                'min_order_quantity':
                                                new_min_quantity,                                   
                                                'status':
                                                new_status,
                                                'last_maintenance_date':
                                                nlast_maint_date_str,
                                                'next_maintenance_date':
                                                nnext_maint_date_str
                                            })
                                        st.success("Part updated successfully!")
                                        st.rerun()
            else:
                st.info("""
                📱 Please select Department to view stock information.
                """)

    if st.session_state.user_role in ['Admin', 'Super User']:
        with add_tab:
            cols = st.columns(2)

            with cols[0]:
                # Department selection
                parent_depts = st.session_state.data_manager.get_parent_departments()
                if parent_depts.empty:
                    st.error("No departments found. Please create departments first.")
                    return
                
                selected_parent = st.selectbox(
                    "Select Parent Department*",
                    parent_depts['id'].tolist(),
                    index=None,
                    placeholder="Select Parent Department",
                    format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0],
                    key = "AddParentDept"
                )
            
            with cols[1]:
                child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
                if not child_depts.empty:            
                    selected_child = st.selectbox(
                        "Select Child Department*",
                        child_depts['id'].tolist(),
                        index=None,
                        placeholder="Select Child Department",
                        format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0],
                        key = "AddChildDept"
                    )

            with st.form("add_part_form"):
                barcode_lbl = ''
                if selected_parent and selected_child:
                    # Get department names
                    parent_dept_name = parent_depts[parent_depts['id'] == selected_parent]['name'].iloc[0]
                    child_dept_name = child_depts[child_depts['id'] == selected_child]['name'].iloc[0]
                    
                    # Get last serial number from database
                    last_serial = st.session_state.data_manager.get_last_serial_number(selected_child)
                    
                    # Generate barcode
                    barcode_lbl = generate_custom_barcode(
                        parent_dept_name, 
                        child_dept_name, 
                        last_serial
                    )
                    
                cols = st.columns(3)

                with cols[0]:
                    part_number = st.text_input("Part Number*", max_chars=20)
                    name = st.text_input("Part Name*", max_chars=100)
                    compartment_no = st.text_input("Compartment Name*", max_chars=20)
                    box_no = st.text_input("Box No*", max_chars=20)                
                    quantity = st.number_input("Initial Quantity*", min_value=0)
                    line_no = st.number_input("Line No*", min_value=1)
                    page_no = st.text_input("Page No", max_chars=20)
                    #yard_no = st.number_input("Yard No*", min_value=1)
                    
                with cols[1]:      
                    barcode = st.text_input("Barcode", value=barcode_lbl, disabled=True)              
                    order_no = st.text_input("Order No", max_chars=20)
                    material_code = st.text_input("Material Code", max_chars=50)
                    ilms_code = st.text_input("ILMS Code*", max_chars=50)
                    item_denomination = st.text_input("Item Denomination", max_chars=100)
                    min_order_level = st.number_input("Minimum Order Level", min_value=0)
                    min_order_quantity = st.number_input("Minimum Order Quantity", min_value=1) 
                    
                with cols[2]:                    
                    last_maintenance_date = st.date_input("Last Maintenance Date")     
                    next_maintenance_date = st.date_input("Next Maintenance Date")
                    status = st.selectbox("Status", ["In Store", "Operational", "Under Maintenance"])                
                    description = st.text_area("Description*")
                    remark = st.text_area("Remarks*")
                    mustered = st.checkbox("Mustered")
                    

                if st.form_submit_button("Add Part"):
                    if part_number and name and ilms_code and description and remark and compartment_no and box_no and barcode:
                        if last_maintenance_date > datetime.now().date():
                            st.error(
                                "Last Maintenance Date should not be greater than the current date."
                            )
                        elif next_maintenance_date <= datetime.now().date():
                            st.error(
                                "Next Maintenance Date should be greater than the current date."
                            )
                        else:
                            #barcode = st.session_state.barcode_handler.generate_unique_barcode()
                            success = st.session_state.data_manager.add_spare_part(
                                {
                                    'part_number': part_number,
                                    'name': name,
                                    'description': description,
                                    'quantity': quantity,
                                    'line_no': line_no,
                                    'page_no': page_no,
                                    'order_no': order_no,
                                    'material_code': material_code,
                                    'ilms_code': ilms_code,
                                    'item_denomination': item_denomination,
                                    'mustered': mustered,
                                    'department_id': selected_child,
                                    'compartment_no': compartment_no,
                                    'box_no': box_no,
                                    'remark': remark,
                                    'min_order_level': min_order_level,
                                    'min_order_quantity': min_order_quantity,
                                    'barcode': barcode,                                
                                    'status': status,
                                    'last_maintenance_date': last_maintenance_date.strftime('%Y-%m-%d'),
                                    'next_maintenance_date': next_maintenance_date.strftime('%Y-%m-%d')
                                })

                            if success:
                                st.success("Part added successfully!")
                                st.markdown(f"Generated barcode: `{barcode}`")
                                barcode_image = st.session_state.barcode_handler.generate_barcode(
                                    barcode)
                                st.image(f"data:image/png;base64,{barcode_image}")
                            else:
                                st.error("Part number already exists!")
                    else:
                        st.error("Part number, Box No, Remarks, Name, Desc, Compartment Name, ILMS Code and Barcode are required!")

        with bulk_tab:
            bulk_import_section()

def generate_custom_barcode(parent_dept_name, child_dept_name, last_serial_no):
    """
    Generate barcode in format: PAR-CH-SERIAL
    Where:
    - PAR: First 3 chars of parent department (uppercase)
    - CH: First char of child department (uppercase)
    - SERIAL: Last serial no + 1 (padded with zeros)
    """
    # Get department codes
    parent_code = parent_dept_name[:3].upper().strip()
    child_code = child_dept_name[:1].upper().strip()
    
    # Calculate next serial number
    next_serial = int(last_serial_no) + 1 if last_serial_no else 1
    
    # Format with leading zeros (e.g., 000123)
    serial_str = f"{next_serial:04d}"  # 4-digit padding
    
    # Combine components
    return f"{parent_code}-{child_code}-{serial_str}"

def download_csv_template():
    """Generate and provide a downloadable CSV template"""
    # Create sample DataFrame with required columns and example rows
    template_data = {
        'part_number': ['ABC-123', 'XYZ-456', ''],
        'name': ['Bearing 10mm', 'Hydraulic Seal', ''],
        'quantity': [5, 10, ''],
        'line_no': [1, 2, ''],
        'description': [1, 1, ''],
        'barcode': ['POP-P-001', 'POP-P-002', ''],
        'page_no': ['A12', 'B34', ''],
        'order_no': ['PO-2023-001', 'PO-2023-002', ''],
        'material_code': ['MAT-001', 'MAT-002', ''],
        'ilms_code': ['ILMS-001', 'ILMS-002', ''],
        'item_denomination': ['Pieces', 'Pieces', ''],
        'mustered': [True, False, ''],
        'compartment_name': ['C-12', 'D-34', ''],
        'box_no': ['B1', 'B2', ''],
        'remark': ['Urgent', 'Normal', '']
    }
    
    df = pd.DataFrame(template_data)
    
    # Convert to CSV
    csv = df.to_csv(index=False)
    
    # Create download button
    st.download_button(
        label="📥 Download CSV Template",
        data=csv,
        file_name="inventory_import_template.csv",
        mime="text/csv",
        help="Download template with all required columns"
    )

def bulk_import_section():
    """Bulk import from CSV with department selection"""
    #st.subheader("Bulk Import from CSV")
    # Add the download button at the top
    download_csv_template()

    # Step 1: Department Selection
    st.markdown("### Step 1: Select Department")
    
    cols = st.columns(2)

    with cols[0]:
        parent_depts = st.session_state.data_manager.get_parent_departments()
        if parent_depts.empty:
            st.error("No departments found. Please create departments first.")
            return
        
        selected_parent = st.selectbox(
            "Select Parent Department*",
            parent_depts['id'].tolist(),
            index=None,
            placeholder="Select Parent Department",
            format_func=lambda x: parent_depts[parent_depts['id'] == x]['name'].iloc[0]
        )
    
    with cols[1]:
        child_depts = st.session_state.data_manager.get_child_departments(selected_parent)
        if not child_depts.empty:
            selected_child = st.selectbox(
                "Select Child Department*",
                child_depts['id'].tolist(),
                index=None,
                placeholder="Select Child Department",
                format_func=lambda x: child_depts[child_depts['id'] == x]['name'].iloc[0]
            )
    
    # Step 2: File Upload
    if selected_parent and selected_child:
        st.markdown("### Step 2: Upload CSV File")
        uploaded_file = st.file_uploader(
            "Choose a CSV file",
            type=["csv"],
            help="Upload a CSV file with spare parts data"
        )
    
        if uploaded_file is not None and selected_child:
            try:
                # Read the uploaded file
                df = pd.read_csv(uploaded_file)
                
                # Validate required columns
                required_columns = [
                    'part_number', 'name', 'quantity', 'ilms_code', #'Remark', 'compartment_name',
                    'description', 'box_no'
                ]
                
                missing_columns = [col for col in required_columns if col not in df.columns]
                if missing_columns:
                    st.error(f"Missing required columns: {', '.join(missing_columns)}")
                    return
                
                # Data cleaning and type conversion
                df_clean = df.copy()
                
                # Handle numeric columns - fill NaN with 0 and convert to int
                numeric_cols = ['quantity', 'line_no']
                for col in numeric_cols:
                    if col in df_clean.columns:
                        df_clean[col] = df_clean[col].fillna(0).astype(int)
                
                # Handle text columns - fill NaN with empty string
                text_cols = [
                    'page_no', 'order_no', 'material_code', 'compartment_name',  'description', 'name',
                    'ilms_code', 'item_denomination', 'box_no', 'Remark'
                ]
                for col in text_cols:
                    if col in df_clean.columns:
                        df_clean[col] = df_clean[col].fillna('').astype(str)
                
                # Handle boolean column
                if 'mustered' in df_clean.columns:
                    df_clean['mustered'] = df_clean['mustered'].fillna(False).astype(bool)
                
                # Show preview with department info
                st.subheader("Import Preview")
                st.info(f"All items will be assigned to: {child_depts[child_depts['id'] == selected_child]['name'].iloc[0]}")
                
                preview_df = df_clean.head().copy()
                preview_df['assigned_department'] = child_depts[child_depts['id'] == selected_child]['name'].iloc[0]
                st.dataframe(preview_df, hide_index=True)
                
                # Map CSV columns to database columns
                column_mapping = {
                    'part_number': 'part_number',
                    'name': 'name',
                    'description': 'description',
                    'quantity': 'quantity',
                    'line_no': 'line_no',
                    'page_no': 'page_no',
                    'order_no': 'order_no',
                    'material_code': 'material_code',
                    'ilms_code': 'ilms_code',
                    'item_denomination': 'item_denomination',
                    'mustered': 'mustered',
                    'box_no': 'box_no',
                    'compartment_no' : 'compartment_name',
                    'Remark': 'remark',
                    'barcode': 'barcode'
                }
                
                df_import = df_clean.rename(columns=column_mapping)
                
                # Step 3: Import Confirmation
                st.markdown("### Step 3: Confirm Import")
                if st.button(f"Import {len(df_clean)} Records"):
                    with st.spinner(f"Importing {len(df_clean)} records..."):
                        results, success, message = st.session_state.data_manager.bulk_import_spare_parts(
                            df_import, selected_child, selected_parent
                        )
                        if success:
                            st.toast(message, icon="✅")
                            time.sleep(3)  # This will block the UI
                            # Process results
                            success_count = len([r for r in results if r['status'] == 'success'])
                            failed_count = len([r for r in results if r['status'] == 'failed'])
                            
                            # Create results dataframe
                            results_df = pd.DataFrame(results)
                            
                            # Show summary
                            st.success(f"Successfully imported {success_count} records")
                            if failed_count > 0:
                                st.error(f"Failed to import {failed_count} records")
                            
                            # Display results table with tabs
                            tab1, tab2 = st.tabs(["All Results", "Failed Only"])
                            
                            with tab1:
                                st.dataframe(results_df, hide_index=True)
                            
                            with tab2:
                                failed_df = results_df[results_df['status'] == 'failed']
                                st.dataframe(failed_df, hide_index=True)
                            
                            # Download buttons
                            st.markdown("### Download Import Results")
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.download_button(
                                    label="Download Full Results (CSV)",
                                    data=convert_df_to_csv(results_df),
                                    file_name="import_results_all.csv",
                                    mime="text/csv"
                                )
                            
                            with col2:
                                st.download_button(
                                    label="Download Failed Only (CSV)",
                                    data=convert_df_to_csv(failed_df),
                                    file_name="import_results_failed.csv",
                                    mime="text/csv"
                                )
                            #st.rerun()
                        else:
                            st.error(message)
                            
            except Exception as e:
                st.error(f"Error processing file: {str(e)}")

def convert_df_to_csv(df):
    """Convert dataframe to CSV for download"""
    return df.to_csv(index=False).encode('utf-8')

if __name__ == "__main__":
    render_inventory_page()
</file>

<file path="pages/operations.py">
import streamlit as st
from data_manager import DataManager
from barcode_handler import BarcodeHandler
from user_management import login_required
from datetime import datetime
import navbar
from app_settings import set_page_configuration
import time

set_page_configuration()

current_page = "Operations"
st.header(current_page)

navbar.nav(current_page)


@login_required
def render_operations_page():
    # Initialize session state if needed
    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()
    if 'barcode_handler' not in st.session_state:
        st.session_state.barcode_handler = BarcodeHandler()
    if 'last_scans' not in st.session_state:
        st.session_state.last_scans = []

    #st.title("Operations")

    # Show any active alerts
    lpl_stock = st.session_state.data_manager.get_last_piece_stock_items()
    if not lpl_stock.empty:
        with st.expander("🚨 Last Piece Stock Alerts", expanded=False):
            st.warning(f"{len(lpl_stock)} items need attention!")
            for _, item in lpl_stock.iterrows():
                st.error(f"""
                    **{item['name']}** (Part #{item['part_number']})
                    - Current Stock: {item['quantity']}
                    - Minimum Level: {item['min_order_level']}
                    - Suggested Order: {item['min_order_quantity']}
                """)

    low_stock = st.session_state.data_manager.get_low_stock_items()
    if not low_stock.empty:
        with st.expander("🚨 Low Stock Alerts", expanded=False):
            st.warning(f"{len(low_stock)} items need attention!")
            for _, item in low_stock.iterrows():
                st.error(f"""
                    **{item['name']}** (Part #{item['part_number']})
                    - Current Stock: {item['quantity']}
                    - Minimum Level: {item['min_order_level']}
                    - Suggested Order: {item['min_order_quantity']}
                """)

    tab1, tab2 = st.tabs(
        ["Barcode Scanner Interface", "Check-In / Check-Out"])

    with tab1:
        #st.subheader("Barcode Scanner Interface")
        st.info("""
        📱 Use this interface with a physical barcode scanner or enter the barcode manually.
        The scanner should work automatically when you scan a barcode.
        """)

        col1, col2 = st.columns([2, 1])
        with col1:
            barcode_input = st.text_input("Scan or Enter Barcode",
                                          key="barcode_scanner",
                                          placeholder="ABC-D-1234")

            if barcode_input:
                is_valid, cleaned_barcode = st.session_state.barcode_handler.validate_barcode(
                    barcode_input)
                print("barcode_input:", barcode_input)  # Add this temporarily
                print("is_valid:", is_valid)  # Add this temporarily
                if is_valid:
                    success, part = st.session_state.barcode_handler.get_part_by_barcode(
                        st.session_state.data_manager, barcode_input)
                    if success:
                        #st.success("Part found!")

                        # Show alert if item is low on stock
                        if part['quantity'] <= part['min_order_level']:
                            st.warning(
                                f"⚠️ Low stock alert: Only {part['quantity']} units remaining!"
                            )

                        st.json({
                            "Name": part['name'],
                            "Part Number": part['part_number'],
                            "Box No": part['box_no'],
                            "Compartment Name": part['compartment_no'],
                            "ILMS Code": part['ilms_code'],
                            "Current Quantity": int(part['quantity']),
                            "Min Order Level": int(part['min_order_level'])
                        })

                        cols = st.columns(2)
                        with cols[0]:
                            # Quick actions for scanned part
                            action = st.selectbox("Select Action",
                                                ["Check In", "Check Out"],
                                                key="barcode_action")

                            quantity = st.number_input(
                                "Quantity",
                                min_value=1,
                                max_value=int(part['quantity'])
                                if action == "Check Out" else None,
                                value=1,
                                key="barcode_quantity")
                        with cols[1]:
                            if action == "Check Out":
                                reason = st.selectbox("Reason", ["Operational", "Maintenance", "Damaged"])
                                remarks = st.text_area("Remarks")
                            else:
                                reason = st.selectbox("Reason", ["New", "After Maintenance"])
                                remarks = st.text_area("Remarks")

                        if st.button(f"Confirm {action}"):
                            transaction_type = 'check_in' if action == "Check In" else 'check_out'

                            success, error_msg = st.session_state.data_manager.record_transaction(
                                part['id'], transaction_type, quantity, reason, remarks)

                            if success:
                                st.success(
                                    f"Successfully {action.lower()}ed {quantity} units"
                                )

                                # Check if action triggered low stock alert
                                updated_df = st.session_state.data_manager.get_part_by_id(
                                    part['id'])
                                if updated_df is not None and not updated_df.empty:
                                    updated_part = updated_df.iloc[0]
                                    if updated_part[
                                            'quantity'] <= updated_part[
                                                'min_order_level']:
                                        st.warning(
                                            f"⚠️ Stock Alert: {updated_part['name']} is now below minimum stock level!"
                                        )

                                st.session_state.last_scans.append(
                                    f"{datetime.now().strftime('%H:%M:%S')} - {part['name']}"
                                )
                                st.rerun()
                            else:
                                st.error(f"Transaction failed: {error_msg}")
                    else:
                        st.error("Barcode not found in system")
                else:
                    st.error(
                        "Invalid barcode format. Expected format: 3 chars - 1 char - 4 digits (ABC-D-1234)"
                    )

        with col2:
            if len(barcode_input) > 0:
                barcode_image = st.session_state.barcode_handler.generate_barcode(barcode_input)
                st.image(f"data:image/png;base64,{barcode_image}")
            st.markdown("### Last Scanned")
            for scan in st.session_state.last_scans[-5:]:
                st.text(scan)

    with tab2:
        df = st.session_state.data_manager.get_all_parts()

        if not df.empty:
            selected_part = st.selectbox("Select Part",
                                         df['description'].tolist(),
                                         key="checkin_part")

            part_data = df[df['description'] == selected_part].iloc[0]

            # Show stock level warning if applicable
            if part_data['quantity'] <= part_data['min_order_level']:
                st.warning(
                    f"⚠️ Low stock alert: Only {part_data['quantity']} units remaining!"
                )
            else:
                st.info(f"Current quantity: {part_data['quantity']}")

            col1, col2 = st.columns(2)

            with col1:
                with st.form("check_in_form"):
                    check_in_quantity = st.number_input("Check-In Quantity",
                                                        min_value=1,
                                                        value=1,
                                                        key="checkin_quantity")
                    reason = st.selectbox("Reason", ["New", "After Maintenance"])
                    remarks = st.text_area("Remarks")
                    
                    if st.form_submit_button("Check-In"):
                        success, error_msg = st.session_state.data_manager.record_transaction(
                            part_data['id'], 'check_in', check_in_quantity, reason, remarks)
                        if success:
                            st.success(f"Checked in {check_in_quantity} units")
                            time.sleep(3)  # This will block the UI
                            st.rerun()
                        else:
                            st.error(f"Transaction failed: {error_msg}")

            with col2:
                with st.form(f"check_out_form_{part_data['id']}"):  # Unique form key per part
                    # Get the available quantity
                    available_quantity = int(part_data['quantity'])
                    
                    if available_quantity > 0:
                        check_out_quantity = st.number_input(
                            "Check-Out Quantity",
                            min_value=1,
                            max_value=available_quantity,
                            value=min(1, available_quantity),
                            key=f"checkout_quantity_{part_data['id']}"
                        )
                        reason = st.selectbox("Reason", ["Operational", "Maintenance", "Damaged"])
                        remarks = st.text_area("Remarks")
                    else:
                        st.warning("This item is currently out of stock")
                        check_out_quantity = 0  # Default value when out of stock
                    
                    # Submit button should be at form level, not nested in if
                    submitted = st.form_submit_button("Check-Out", disabled=(available_quantity <= 0))
                    
                    if submitted and available_quantity > 0:
                        success, error_msg = st.session_state.data_manager.record_transaction(
                            part_data['id'], 'check_out', check_out_quantity, reason, remarks)

                        if success:
                            # Check for low stock alert
                            updated_df = st.session_state.data_manager.get_part_by_id(part_data['id'])
                            if updated_df is not None and not updated_df.empty:
                                updated_part = updated_df.iloc[0]
                                if updated_part['quantity'] <= updated_part['min_order_level']:
                                    st.warning(
                                        f"⚠️ Stock Alert: {updated_part['name']} is now below minimum stock level!"
                                    )
                            
                            st.success(f"Successfully checked out {check_out_quantity} units of {part_data['name']}")
                            #st.toast(message, icon="✅")
                            time.sleep(3)  # This will block the UI
                            st.rerun()
                        else:
                            st.error(f"Transaction failed: {error_msg}")


if __name__ == "__main__":
    render_operations_page()
</file>

</files>
